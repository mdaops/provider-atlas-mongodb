// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSConfigurationClusterAwsInitParameters struct {

	// Indicates whether the project's clusters deployed to AWS use custom DNS. If true, the Get All Clusters and Get One Cluster endpoints return the connectionStrings.private and connectionStrings.privateSrv fields for clusters deployed to AWS .
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Required 	Unique identifier for the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type DNSConfigurationClusterAwsObservation struct {

	// Indicates whether the project's clusters deployed to AWS use custom DNS. If true, the Get All Clusters and Get One Cluster endpoints return the connectionStrings.private and connectionStrings.privateSrv fields for clusters deployed to AWS .
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Required 	Unique identifier for the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type DNSConfigurationClusterAwsParameters struct {

	// Indicates whether the project's clusters deployed to AWS use custom DNS. If true, the Get All Clusters and Get One Cluster endpoints return the connectionStrings.private and connectionStrings.privateSrv fields for clusters deployed to AWS .
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Required 	Unique identifier for the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// DNSConfigurationClusterAwsSpec defines the desired state of DNSConfigurationClusterAws
type DNSConfigurationClusterAwsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSConfigurationClusterAwsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DNSConfigurationClusterAwsInitParameters `json:"initProvider,omitempty"`
}

// DNSConfigurationClusterAwsStatus defines the observed state of DNSConfigurationClusterAws.
type DNSConfigurationClusterAwsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSConfigurationClusterAwsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DNSConfigurationClusterAws is the Schema for the DNSConfigurationClusterAwss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type DNSConfigurationClusterAws struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   DNSConfigurationClusterAwsSpec   `json:"spec"`
	Status DNSConfigurationClusterAwsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSConfigurationClusterAwsList contains a list of DNSConfigurationClusterAwss
type DNSConfigurationClusterAwsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSConfigurationClusterAws `json:"items"`
}

// Repository type metadata.
var (
	DNSConfigurationClusterAws_Kind             = "DNSConfigurationClusterAws"
	DNSConfigurationClusterAws_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSConfigurationClusterAws_Kind}.String()
	DNSConfigurationClusterAws_KindAPIVersion   = DNSConfigurationClusterAws_Kind + "." + CRDGroupVersion.String()
	DNSConfigurationClusterAws_GroupVersionKind = CRDGroupVersion.WithKind(DNSConfigurationClusterAws_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSConfigurationClusterAws{}, &DNSConfigurationClusterAwsList{})
}
