// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsInitParameters struct {

	// Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions
	// -> Note: The privilege actions available to the Custom Roles API resource represent a subset of the privilege actions available in the Atlas Custom Roles UI.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
	Resources []ResourcesInitParameters `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ActionsObservation struct {

	// Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions
	// -> Note: The privilege actions available to the Custom Roles API resource represent a subset of the privilege actions available in the Atlas Custom Roles UI.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
	Resources []ResourcesObservation `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ActionsParameters struct {

	// Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions
	// -> Note: The privilege actions available to the Custom Roles API resource represent a subset of the privilege actions available in the Atlas Custom Roles UI.
	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
	// +kubebuilder:validation:Optional
	Resources []ResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type DBRoleInitParameters struct {
	Actions []ActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	InheritedRoles []InheritedRolesInitParameters `json:"inheritedRoles,omitempty" tf:"inherited_roles,omitempty"`

	// The unique ID for the project to create the database user.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the custom role.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type DBRoleObservation struct {
	Actions []ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InheritedRoles []InheritedRolesObservation `json:"inheritedRoles,omitempty" tf:"inherited_roles,omitempty"`

	// The unique ID for the project to create the database user.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the custom role.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type DBRoleParameters struct {

	// +kubebuilder:validation:Optional
	Actions []ActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// +kubebuilder:validation:Optional
	InheritedRoles []InheritedRolesParameters `json:"inheritedRoles,omitempty" tf:"inherited_roles,omitempty"`

	// The unique ID for the project to create the database user.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the custom role.
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type InheritedRolesInitParameters struct {

	// Database on which the action is granted.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Name of the custom role.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type InheritedRolesObservation struct {

	// Database on which the action is granted.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// Name of the custom role.
	RoleName *string `json:"roleName,omitempty" tf:"role_name,omitempty"`
}

type InheritedRolesParameters struct {

	// Database on which the action is granted.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// Name of the custom role.
	// +kubebuilder:validation:Optional
	RoleName *string `json:"roleName" tf:"role_name,omitempty"`
}

type ResourcesInitParameters struct {

	// field.
	Cluster *bool `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Collection on which the action is granted. If this value is an empty string, the action is granted on all collections within the database specified in the actions.resources.db field.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database on which the action is granted.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ResourcesObservation struct {

	// field.
	Cluster *bool `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Collection on which the action is granted. If this value is an empty string, the action is granted on all collections within the database specified in the actions.resources.db field.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database on which the action is granted.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ResourcesParameters struct {

	// field.
	// +kubebuilder:validation:Optional
	Cluster *bool `json:"cluster,omitempty" tf:"cluster,omitempty"`

	// Collection on which the action is granted. If this value is an empty string, the action is granted on all collections within the database specified in the actions.resources.db field.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database on which the action is granted.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

// DBRoleSpec defines the desired state of DBRole
type DBRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DBRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DBRoleInitParameters `json:"initProvider,omitempty"`
}

// DBRoleStatus defines the observed state of DBRole.
type DBRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DBRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DBRole is the Schema for the DBRoles API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type DBRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleName) || (has(self.initProvider) && has(self.initProvider.roleName))",message="spec.forProvider.roleName is a required parameter"
	Spec   DBRoleSpec   `json:"spec"`
	Status DBRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DBRoleList contains a list of DBRoles
type DBRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DBRole `json:"items"`
}

// Repository type metadata.
var (
	DBRole_Kind             = "DBRole"
	DBRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DBRole_Kind}.String()
	DBRole_KindAPIVersion   = DBRole_Kind + "." + CRDGroupVersion.String()
	DBRole_GroupVersionKind = CRDGroupVersion.WithKind(DBRole_Kind)
)

func init() {
	SchemeBuilder.Register(&DBRole{}, &DBRoleList{})
}
