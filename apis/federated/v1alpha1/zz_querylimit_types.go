// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueryLimitInitParameters struct {

	// Default value of the limit.
	DefaultLimit *float64 `json:"defaultLimit,omitempty" tf:"default_limit,omitempty"`

	// String enum that indicates whether the identity provider is active or not. Accepted values are:
	LimitName *string `json:"limitName,omitempty" tf:"limit_name,omitempty"`

	MaximumLimit *float64 `json:"maximumLimit,omitempty" tf:"maximum_limit,omitempty"`

	// String enum that identifies action to take when the usage limit is exceeded. If limit span is set to QUERY, this is ignored because MongoDB Cloud stops the query when it exceeds the usage limit. Accepted values are "BLOCK" OR "BLOCK_AND_KILL"
	OverrunPolicy *string `json:"overrunPolicy,omitempty" tf:"overrun_policy,omitempty"`

	// The unique ID for the project to create a Federated Database Instance.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Atlas Federated Database Instance.
	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	// Amount to set the limit to.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryLimitObservation struct {

	// Amount that indicates the current usage of the limit.
	CurrentUsage *float64 `json:"currentUsage,omitempty" tf:"current_usage,omitempty"`

	// Default value of the limit.
	DefaultLimit *float64 `json:"defaultLimit,omitempty" tf:"default_limit,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastModifiedDate *string `json:"lastModifiedDate,omitempty" tf:"last_modified_date,omitempty"`

	// String enum that indicates whether the identity provider is active or not. Accepted values are:
	LimitName *string `json:"limitName,omitempty" tf:"limit_name,omitempty"`

	MaximumLimit *float64 `json:"maximumLimit,omitempty" tf:"maximum_limit,omitempty"`

	// String enum that identifies action to take when the usage limit is exceeded. If limit span is set to QUERY, this is ignored because MongoDB Cloud stops the query when it exceeds the usage limit. Accepted values are "BLOCK" OR "BLOCK_AND_KILL"
	OverrunPolicy *string `json:"overrunPolicy,omitempty" tf:"overrun_policy,omitempty"`

	// The unique ID for the project to create a Federated Database Instance.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Atlas Federated Database Instance.
	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	// Amount to set the limit to.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type QueryLimitParameters struct {

	// Default value of the limit.
	// +kubebuilder:validation:Optional
	DefaultLimit *float64 `json:"defaultLimit,omitempty" tf:"default_limit,omitempty"`

	// String enum that indicates whether the identity provider is active or not. Accepted values are:
	// +kubebuilder:validation:Optional
	LimitName *string `json:"limitName,omitempty" tf:"limit_name,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumLimit *float64 `json:"maximumLimit,omitempty" tf:"maximum_limit,omitempty"`

	// String enum that identifies action to take when the usage limit is exceeded. If limit span is set to QUERY, this is ignored because MongoDB Cloud stops the query when it exceeds the usage limit. Accepted values are "BLOCK" OR "BLOCK_AND_KILL"
	// +kubebuilder:validation:Optional
	OverrunPolicy *string `json:"overrunPolicy,omitempty" tf:"overrun_policy,omitempty"`

	// The unique ID for the project to create a Federated Database Instance.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Name of the Atlas Federated Database Instance.
	// +kubebuilder:validation:Optional
	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	// Amount to set the limit to.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

// QueryLimitSpec defines the desired state of QueryLimit
type QueryLimitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueryLimitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueryLimitInitParameters `json:"initProvider,omitempty"`
}

// QueryLimitStatus defines the observed state of QueryLimit.
type QueryLimitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueryLimitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// QueryLimit is the Schema for the QueryLimits API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type QueryLimit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.limitName) || (has(self.initProvider) && has(self.initProvider.limitName))",message="spec.forProvider.limitName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.overrunPolicy) || (has(self.initProvider) && has(self.initProvider.overrunPolicy))",message="spec.forProvider.overrunPolicy is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tenantName) || (has(self.initProvider) && has(self.initProvider.tenantName))",message="spec.forProvider.tenantName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   QueryLimitSpec   `json:"spec"`
	Status QueryLimitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueryLimitList contains a list of QueryLimits
type QueryLimitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QueryLimit `json:"items"`
}

// Repository type metadata.
var (
	QueryLimit_Kind             = "QueryLimit"
	QueryLimit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QueryLimit_Kind}.String()
	QueryLimit_KindAPIVersion   = QueryLimit_Kind + "." + CRDGroupVersion.String()
	QueryLimit_GroupVersionKind = CRDGroupVersion.WithKind(QueryLimit_Kind)
)

func init() {
	SchemeBuilder.Register(&QueryLimit{}, &QueryLimitList{})
}
