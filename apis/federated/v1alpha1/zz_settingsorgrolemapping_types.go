// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleAssignmentsInitParameters struct {

	// Unique identifier of the project to which you want the role mapping to apply.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Specifies the Roles that are attached to the Role Mapping. Available role IDs can be found on the User Roles
	// Reference.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type RoleAssignmentsObservation struct {

	// Unique identifier of the project to which you want the role mapping to apply.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Specifies the Roles that are attached to the Role Mapping. Available role IDs can be found on the User Roles
	// Reference.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type RoleAssignmentsParameters struct {

	// Unique identifier of the project to which you want the role mapping to apply.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Specifies the Roles that are attached to the Role Mapping. Available role IDs can be found on the User Roles
	// Reference.
	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type SettingsOrgRoleMappingInitParameters struct {

	// Unique human-readable label that identifies the identity provider group to which this role mapping applies.
	ExternalGroupName *string `json:"externalGroupName,omitempty" tf:"external_group_name,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsID *string `json:"federationSettingsId,omitempty" tf:"federation_settings_id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Atlas roles and the unique identifiers of the groups and organizations associated with each role.
	RoleAssignments []RoleAssignmentsInitParameters `json:"roleAssignments,omitempty" tf:"role_assignments,omitempty"`
}

type SettingsOrgRoleMappingObservation struct {

	// Unique human-readable label that identifies the identity provider group to which this role mapping applies.
	ExternalGroupName *string `json:"externalGroupName,omitempty" tf:"external_group_name,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsID *string `json:"federationSettingsId,omitempty" tf:"federation_settings_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Atlas roles and the unique identifiers of the groups and organizations associated with each role.
	RoleAssignments []RoleAssignmentsObservation `json:"roleAssignments,omitempty" tf:"role_assignments,omitempty"`

	// Unique 24-hexadecimal digit string that identifies this role mapping.
	RoleMappingID *string `json:"roleMappingId,omitempty" tf:"role_mapping_id,omitempty"`
}

type SettingsOrgRoleMappingParameters struct {

	// Unique human-readable label that identifies the identity provider group to which this role mapping applies.
	// +kubebuilder:validation:Optional
	ExternalGroupName *string `json:"externalGroupName,omitempty" tf:"external_group_name,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	// +kubebuilder:validation:Optional
	FederationSettingsID *string `json:"federationSettingsId,omitempty" tf:"federation_settings_id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// Atlas roles and the unique identifiers of the groups and organizations associated with each role.
	// +kubebuilder:validation:Optional
	RoleAssignments []RoleAssignmentsParameters `json:"roleAssignments,omitempty" tf:"role_assignments,omitempty"`
}

// SettingsOrgRoleMappingSpec defines the desired state of SettingsOrgRoleMapping
type SettingsOrgRoleMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsOrgRoleMappingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SettingsOrgRoleMappingInitParameters `json:"initProvider,omitempty"`
}

// SettingsOrgRoleMappingStatus defines the observed state of SettingsOrgRoleMapping.
type SettingsOrgRoleMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsOrgRoleMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SettingsOrgRoleMapping is the Schema for the SettingsOrgRoleMappings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type SettingsOrgRoleMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.externalGroupName) || (has(self.initProvider) && has(self.initProvider.externalGroupName))",message="spec.forProvider.externalGroupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.federationSettingsId) || (has(self.initProvider) && has(self.initProvider.federationSettingsId))",message="spec.forProvider.federationSettingsId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.orgId) || (has(self.initProvider) && has(self.initProvider.orgId))",message="spec.forProvider.orgId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleAssignments) || (has(self.initProvider) && has(self.initProvider.roleAssignments))",message="spec.forProvider.roleAssignments is a required parameter"
	Spec   SettingsOrgRoleMappingSpec   `json:"spec"`
	Status SettingsOrgRoleMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsOrgRoleMappingList contains a list of SettingsOrgRoleMappings
type SettingsOrgRoleMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SettingsOrgRoleMapping `json:"items"`
}

// Repository type metadata.
var (
	SettingsOrgRoleMapping_Kind             = "SettingsOrgRoleMapping"
	SettingsOrgRoleMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SettingsOrgRoleMapping_Kind}.String()
	SettingsOrgRoleMapping_KindAPIVersion   = SettingsOrgRoleMapping_Kind + "." + CRDGroupVersion.String()
	SettingsOrgRoleMapping_GroupVersionKind = CRDGroupVersion.WithKind(SettingsOrgRoleMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&SettingsOrgRoleMapping{}, &SettingsOrgRoleMappingList{})
}
