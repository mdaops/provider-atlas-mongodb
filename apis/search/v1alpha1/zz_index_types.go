// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndexInitParameters struct {

	// Analyzer to use when creating the index. Defaults to lucene.standard
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	// Custom analyzers to use in this index. This is an array of JSON objects.
	Analyzers *string `json:"analyzers,omitempty" tf:"analyzers,omitempty"`

	// The name of the cluster where you want to create the search index within.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the collection the index is on. NOTE: The collection must exist before creating the index.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Name of the database the collection is in.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Array of Fields to configure this vectorSearch index. It is mandatory for vector searches and it must contain at least one vector type field. This field needs to be a JSON string in order to be decoded correctly.
	Fields *string `json:"fields,omitempty" tf:"fields,omitempty"`

	// Indicates whether the search index uses dynamic or static mapping. For dynamic mapping, set the value to true. For static mapping, specify the fields to index using mappings_fields
	MappingsDynamic *bool `json:"mappingsDynamic,omitempty" tf:"mappings_dynamic,omitempty"`

	// attribute is required in search indexes when mappings_dynamic is false. This field needs to be a JSON string in order to be decoded correctly.
	MappingsFields *string `json:"mappingsFields,omitempty" tf:"mappings_fields,omitempty"`

	// The ID of the organization or project you want to create the search index within.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Analyzer to use when searching the index. Defaults to lucene.standard
	SearchAnalyzer *string `json:"searchAnalyzer,omitempty" tf:"search_analyzer,omitempty"`

	// String that can be "true" (store all fields), "false" (default, don't store any field), or a JSON string that contains the list of fields to store (include) or not store (exclude) on Atlas Search. To learn more, see Stored Source Fields.
	StoredSource *string `json:"storedSource,omitempty" tf:"stored_source,omitempty"`

	// Synonyms mapping definition to use in this index.
	Synonyms []SynonymsInitParameters `json:"synonyms,omitempty" tf:"synonyms,omitempty"`

	// Type of index: search or vectorSearch. Default type is search.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	WaitForIndexBuildCompletion *bool `json:"waitForIndexBuildCompletion,omitempty" tf:"wait_for_index_build_completion,omitempty"`
}

type IndexObservation struct {

	// Analyzer to use when creating the index. Defaults to lucene.standard
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	// Custom analyzers to use in this index. This is an array of JSON objects.
	Analyzers *string `json:"analyzers,omitempty" tf:"analyzers,omitempty"`

	// The name of the cluster where you want to create the search index within.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the collection the index is on. NOTE: The collection must exist before creating the index.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Name of the database the collection is in.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Array of Fields to configure this vectorSearch index. It is mandatory for vector searches and it must contain at least one vector type field. This field needs to be a JSON string in order to be decoded correctly.
	Fields *string `json:"fields,omitempty" tf:"fields,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique identifier of the Atlas Search index.
	IndexID *string `json:"indexId,omitempty" tf:"index_id,omitempty"`

	// Indicates whether the search index uses dynamic or static mapping. For dynamic mapping, set the value to true. For static mapping, specify the fields to index using mappings_fields
	MappingsDynamic *bool `json:"mappingsDynamic,omitempty" tf:"mappings_dynamic,omitempty"`

	// attribute is required in search indexes when mappings_dynamic is false. This field needs to be a JSON string in order to be decoded correctly.
	MappingsFields *string `json:"mappingsFields,omitempty" tf:"mappings_fields,omitempty"`

	// The ID of the organization or project you want to create the search index within.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Analyzer to use when searching the index. Defaults to lucene.standard
	SearchAnalyzer *string `json:"searchAnalyzer,omitempty" tf:"search_analyzer,omitempty"`

	// Current status of the index.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// String that can be "true" (store all fields), "false" (default, don't store any field), or a JSON string that contains the list of fields to store (include) or not store (exclude) on Atlas Search. To learn more, see Stored Source Fields.
	StoredSource *string `json:"storedSource,omitempty" tf:"stored_source,omitempty"`

	// Synonyms mapping definition to use in this index.
	Synonyms []SynonymsObservation `json:"synonyms,omitempty" tf:"synonyms,omitempty"`

	// Type of index: search or vectorSearch. Default type is search.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	WaitForIndexBuildCompletion *bool `json:"waitForIndexBuildCompletion,omitempty" tf:"wait_for_index_build_completion,omitempty"`
}

type IndexParameters struct {

	// Analyzer to use when creating the index. Defaults to lucene.standard
	// +kubebuilder:validation:Optional
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	// Custom analyzers to use in this index. This is an array of JSON objects.
	// +kubebuilder:validation:Optional
	Analyzers *string `json:"analyzers,omitempty" tf:"analyzers,omitempty"`

	// The name of the cluster where you want to create the search index within.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the collection the index is on. NOTE: The collection must exist before creating the index.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Name of the database the collection is in.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Array of Fields to configure this vectorSearch index. It is mandatory for vector searches and it must contain at least one vector type field. This field needs to be a JSON string in order to be decoded correctly.
	// +kubebuilder:validation:Optional
	Fields *string `json:"fields,omitempty" tf:"fields,omitempty"`

	// Indicates whether the search index uses dynamic or static mapping. For dynamic mapping, set the value to true. For static mapping, specify the fields to index using mappings_fields
	// +kubebuilder:validation:Optional
	MappingsDynamic *bool `json:"mappingsDynamic,omitempty" tf:"mappings_dynamic,omitempty"`

	// attribute is required in search indexes when mappings_dynamic is false. This field needs to be a JSON string in order to be decoded correctly.
	// +kubebuilder:validation:Optional
	MappingsFields *string `json:"mappingsFields,omitempty" tf:"mappings_fields,omitempty"`

	// The ID of the organization or project you want to create the search index within.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Analyzer to use when searching the index. Defaults to lucene.standard
	// +kubebuilder:validation:Optional
	SearchAnalyzer *string `json:"searchAnalyzer,omitempty" tf:"search_analyzer,omitempty"`

	// String that can be "true" (store all fields), "false" (default, don't store any field), or a JSON string that contains the list of fields to store (include) or not store (exclude) on Atlas Search. To learn more, see Stored Source Fields.
	// +kubebuilder:validation:Optional
	StoredSource *string `json:"storedSource,omitempty" tf:"stored_source,omitempty"`

	// Synonyms mapping definition to use in this index.
	// +kubebuilder:validation:Optional
	Synonyms []SynonymsParameters `json:"synonyms,omitempty" tf:"synonyms,omitempty"`

	// Type of index: search or vectorSearch. Default type is search.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	WaitForIndexBuildCompletion *bool `json:"waitForIndexBuildCompletion,omitempty" tf:"wait_for_index_build_completion,omitempty"`
}

type SynonymsInitParameters struct {

	// Analyzer to use when creating the index. Defaults to lucene.standard
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	// The name of the search index you want to create.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the Synonyms Source Collection Documents.
	SourceCollection *string `json:"sourceCollection,omitempty" tf:"source_collection,omitempty"`
}

type SynonymsObservation struct {

	// Analyzer to use when creating the index. Defaults to lucene.standard
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	// The name of the search index you want to create.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the Synonyms Source Collection Documents.
	SourceCollection *string `json:"sourceCollection,omitempty" tf:"source_collection,omitempty"`
}

type SynonymsParameters struct {

	// Analyzer to use when creating the index. Defaults to lucene.standard
	// +kubebuilder:validation:Optional
	Analyzer *string `json:"analyzer" tf:"analyzer,omitempty"`

	// The name of the search index you want to create.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the Synonyms Source Collection Documents.
	// +kubebuilder:validation:Optional
	SourceCollection *string `json:"sourceCollection" tf:"source_collection,omitempty"`
}

// IndexSpec defines the desired state of Index
type IndexSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IndexInitParameters `json:"initProvider,omitempty"`
}

// IndexStatus defines the observed state of Index.
type IndexStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Index is the Schema for the Indexs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type Index struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterName) || (has(self.initProvider) && has(self.initProvider.clusterName))",message="spec.forProvider.clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.collectionName) || (has(self.initProvider) && has(self.initProvider.collectionName))",message="spec.forProvider.collectionName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   IndexSpec   `json:"spec"`
	Status IndexStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexList contains a list of Indexs
type IndexList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Index `json:"items"`
}

// Repository type metadata.
var (
	Index_Kind             = "Index"
	Index_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Index_Kind}.String()
	Index_KindAPIVersion   = Index_Kind + "." + CRDGroupVersion.String()
	Index_GroupVersionKind = CRDGroupVersion.WithKind(Index_Kind)
)

func init() {
	SchemeBuilder.Register(&Index{}, &IndexList{})
}
