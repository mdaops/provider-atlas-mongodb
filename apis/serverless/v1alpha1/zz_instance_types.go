// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceInitParameters struct {

	// (Deprecated, Optional) Flag that indicates whether the serverless instance uses Serverless Auto Indexing. This parameter defaults to true.
	AutoIndexing *bool `json:"autoIndexing,omitempty" tf:"auto_indexing,omitempty"`

	// (Deprecated, Optional) Flag that indicates whether the serverless instance uses Serverless Continuous Backup. If this parameter is false or not used, the serverless instance uses Basic Backup.
	ContinuousBackupEnabled *bool `json:"continuousBackupEnabled,omitempty" tf:"continuous_backup_enabled,omitempty"`

	Links []LinksInitParameters `json:"links,omitempty" tf:"links,omitempty"`

	// The ID of the organization or project you want to create the serverless instance within.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
	ProviderSettingsBackingProviderName *string `json:"providerSettingsBackingProviderName,omitempty" tf:"provider_settings_backing_provider_name,omitempty"`

	// Cloud service provider that applies to the provisioned the serverless instance.
	ProviderSettingsProviderName *string `json:"providerSettingsProviderName,omitempty" tf:"provider_settings_provider_name,omitempty"`

	// Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
	ProviderSettingsRegionName *string `json:"providerSettingsRegionName,omitempty" tf:"provider_settings_region_name,omitempty"`

	// Stage of deployment of this serverless instance when the resource made its request.
	StateName *string `json:"stateName,omitempty" tf:"state_name,omitempty"`

	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty" tf:"termination_protection_enabled,omitempty"`
}

type InstanceObservation struct {

	// (Deprecated, Optional) Flag that indicates whether the serverless instance uses Serverless Auto Indexing. This parameter defaults to true.
	AutoIndexing *bool `json:"autoIndexing,omitempty" tf:"auto_indexing,omitempty"`

	// List of Serverless Private Endpoint Connections
	ConnectionStringsPrivateEndpointSrv []*string `json:"connectionStringsPrivateEndpointSrv,omitempty" tf:"connection_strings_private_endpoint_srv,omitempty"`

	// Public mongodb+srv:// connection string that you can use to connect to this serverless instance.
	ConnectionStringsStandardSrv *string `json:"connectionStringsStandardSrv,omitempty" tf:"connection_strings_standard_srv,omitempty"`

	// (Deprecated, Optional) Flag that indicates whether the serverless instance uses Serverless Continuous Backup. If this parameter is false or not used, the serverless instance uses Basic Backup.
	ContinuousBackupEnabled *bool `json:"continuousBackupEnabled,omitempty" tf:"continuous_backup_enabled,omitempty"`

	// Timestamp that indicates when MongoDB Cloud created the serverless instance. The timestamp displays in the ISO 8601 date and time format in UTC.
	CreateDate *string `json:"createDate,omitempty" tf:"create_date,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the serverless instance.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []LinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	// Version of MongoDB that the serverless instance runs, in <major version>.<minor version> format.
	MongoDBVersion *string `json:"mongoDbVersion,omitempty" tf:"mongo_db_version,omitempty"`

	// The ID of the organization or project you want to create the serverless instance within.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
	ProviderSettingsBackingProviderName *string `json:"providerSettingsBackingProviderName,omitempty" tf:"provider_settings_backing_provider_name,omitempty"`

	// Cloud service provider that applies to the provisioned the serverless instance.
	ProviderSettingsProviderName *string `json:"providerSettingsProviderName,omitempty" tf:"provider_settings_provider_name,omitempty"`

	// Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
	ProviderSettingsRegionName *string `json:"providerSettingsRegionName,omitempty" tf:"provider_settings_region_name,omitempty"`

	// Stage of deployment of this serverless instance when the resource made its request.
	StateName *string `json:"stateName,omitempty" tf:"state_name,omitempty"`

	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty" tf:"termination_protection_enabled,omitempty"`
}

type InstanceParameters struct {

	// (Deprecated, Optional) Flag that indicates whether the serverless instance uses Serverless Auto Indexing. This parameter defaults to true.
	// +kubebuilder:validation:Optional
	AutoIndexing *bool `json:"autoIndexing,omitempty" tf:"auto_indexing,omitempty"`

	// (Deprecated, Optional) Flag that indicates whether the serverless instance uses Serverless Continuous Backup. If this parameter is false or not used, the serverless instance uses Basic Backup.
	// +kubebuilder:validation:Optional
	ContinuousBackupEnabled *bool `json:"continuousBackupEnabled,omitempty" tf:"continuous_backup_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Links []LinksParameters `json:"links,omitempty" tf:"links,omitempty"`

	// The ID of the organization or project you want to create the serverless instance within.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
	// +kubebuilder:validation:Optional
	ProviderSettingsBackingProviderName *string `json:"providerSettingsBackingProviderName,omitempty" tf:"provider_settings_backing_provider_name,omitempty"`

	// Cloud service provider that applies to the provisioned the serverless instance.
	// +kubebuilder:validation:Optional
	ProviderSettingsProviderName *string `json:"providerSettingsProviderName,omitempty" tf:"provider_settings_provider_name,omitempty"`

	// Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
	// +kubebuilder:validation:Optional
	ProviderSettingsRegionName *string `json:"providerSettingsRegionName,omitempty" tf:"provider_settings_region_name,omitempty"`

	// Stage of deployment of this serverless instance when the resource made its request.
	// +kubebuilder:validation:Optional
	StateName *string `json:"stateName,omitempty" tf:"state_name,omitempty"`

	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	// +kubebuilder:validation:Optional
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty" tf:"termination_protection_enabled,omitempty"`
}

type LinksInitParameters struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type LinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type LinksParameters struct {

	// +kubebuilder:validation:Optional
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	// +kubebuilder:validation:Optional
	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type TagsInitParameters struct {

	// Constant that defines the set of the tag.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Variable that belongs to the set of the tag.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsObservation struct {

	// Constant that defines the set of the tag.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Variable that belongs to the set of the tag.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {

	// Constant that defines the set of the tag.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Variable that belongs to the set of the tag.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// InstanceSpec defines the desired state of Instance
type InstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider InstanceInitParameters `json:"initProvider,omitempty"`
}

// InstanceStatus defines the observed state of Instance.
type InstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Instance is the Schema for the Instances API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type Instance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerSettingsBackingProviderName) || (has(self.initProvider) && has(self.initProvider.providerSettingsBackingProviderName))",message="spec.forProvider.providerSettingsBackingProviderName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerSettingsProviderName) || (has(self.initProvider) && has(self.initProvider.providerSettingsProviderName))",message="spec.forProvider.providerSettingsProviderName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerSettingsRegionName) || (has(self.initProvider) && has(self.initProvider.providerSettingsRegionName))",message="spec.forProvider.providerSettingsRegionName is a required parameter"
	Spec   InstanceSpec   `json:"spec"`
	Status InstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceList contains a list of Instances
type InstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Instance `json:"items"`
}

// Repository type metadata.
var (
	Instance_Kind             = "Instance"
	Instance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Instance_Kind}.String()
	Instance_KindAPIVersion   = Instance_Kind + "." + CRDGroupVersion.String()
	Instance_GroupVersionKind = CRDGroupVersion.WithKind(Instance_Kind)
)

func init() {
	SchemeBuilder.Register(&Instance{}, &InstanceList{})
}
