// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrivatelinkEndpointInitParameters struct {

	// (String) Domain name of Privatelink connected cluster.
	// Domain name of Privatelink connected cluster.
	DNSDomain *string `json:"dnsDomain,omitempty" tf:"dns_domain,omitempty"`

	// Domain name of Confluent cluster. These are typically your availability zones.
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	DNSSubDomain []*string `json:"dnsSubDomain,omitempty" tf:"dns_sub_domain,omitempty"`

	// hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	// Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.
	//
	// **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) Provider where the Kafka cluster is deployed.
	// Provider where the Kafka cluster is deployed.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (String) Domain name of Confluent cluster.
	// Domain name of Confluent cluster.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Service Endpoint ID.
	// Service Endpoint ID.
	ServiceEndpointID *string `json:"serviceEndpointId,omitempty" tf:"service_endpoint_id,omitempty"`

	// (String) Vendor who manages the Kafka cluster.
	// Vendor who manages the Kafka cluster.
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

type PrivatelinkEndpointObservation struct {

	// (String) Domain name of Privatelink connected cluster.
	// Domain name of Privatelink connected cluster.
	DNSDomain *string `json:"dnsDomain,omitempty" tf:"dns_domain,omitempty"`

	// Domain name of Confluent cluster. These are typically your availability zones.
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	DNSSubDomain []*string `json:"dnsSubDomain,omitempty" tf:"dns_sub_domain,omitempty"`

	// (String) The ID of the Private Link connection.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Interface endpoint ID that is created from the specified service endpoint ID.
	// Interface endpoint ID that is created from the specified service endpoint ID.
	InterfaceEndpointID *string `json:"interfaceEndpointId,omitempty" tf:"interface_endpoint_id,omitempty"`

	// hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	// Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.
	//
	// **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) Provider where the Kafka cluster is deployed.
	// Provider where the Kafka cluster is deployed.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (String) Domain name of Confluent cluster.
	// Domain name of Confluent cluster.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Service Endpoint ID.
	// Service Endpoint ID.
	ServiceEndpointID *string `json:"serviceEndpointId,omitempty" tf:"service_endpoint_id,omitempty"`

	// (String) Status of the connection.
	// Status of the connection.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String) Vendor who manages the Kafka cluster.
	// Vendor who manages the Kafka cluster.
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

type PrivatelinkEndpointParameters struct {

	// (String) Domain name of Privatelink connected cluster.
	// Domain name of Privatelink connected cluster.
	// +kubebuilder:validation:Optional
	DNSDomain *string `json:"dnsDomain,omitempty" tf:"dns_domain,omitempty"`

	// Domain name of Confluent cluster. These are typically your availability zones.
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	// +kubebuilder:validation:Optional
	DNSSubDomain []*string `json:"dnsSubDomain,omitempty" tf:"dns_sub_domain,omitempty"`

	// hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	// Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.
	//
	// **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (String) Provider where the Kafka cluster is deployed.
	// Provider where the Kafka cluster is deployed.
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// (String) Domain name of Confluent cluster.
	// Domain name of Confluent cluster.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) Service Endpoint ID.
	// Service Endpoint ID.
	// +kubebuilder:validation:Optional
	ServiceEndpointID *string `json:"serviceEndpointId,omitempty" tf:"service_endpoint_id,omitempty"`

	// (String) Vendor who manages the Kafka cluster.
	// Vendor who manages the Kafka cluster.
	// +kubebuilder:validation:Optional
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

// PrivatelinkEndpointSpec defines the desired state of PrivatelinkEndpoint
type PrivatelinkEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivatelinkEndpointParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivatelinkEndpointInitParameters `json:"initProvider,omitempty"`
}

// PrivatelinkEndpointStatus defines the observed state of PrivatelinkEndpoint.
type PrivatelinkEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivatelinkEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivatelinkEndpoint is the Schema for the PrivatelinkEndpoints API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type PrivatelinkEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vendor) || (has(self.initProvider) && has(self.initProvider.vendor))",message="spec.forProvider.vendor is a required parameter"
	Spec   PrivatelinkEndpointSpec   `json:"spec"`
	Status PrivatelinkEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivatelinkEndpointList contains a list of PrivatelinkEndpoints
type PrivatelinkEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivatelinkEndpoint `json:"items"`
}

// Repository type metadata.
var (
	PrivatelinkEndpoint_Kind             = "PrivatelinkEndpoint"
	PrivatelinkEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivatelinkEndpoint_Kind}.String()
	PrivatelinkEndpoint_KindAPIVersion   = PrivatelinkEndpoint_Kind + "." + CRDGroupVersion.String()
	PrivatelinkEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(PrivatelinkEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivatelinkEndpoint{}, &PrivatelinkEndpointList{})
}
