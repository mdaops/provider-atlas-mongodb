// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupSnapshotExportJobInitParameters struct {

	// Name of the Atlas cluster whose snapshot you want to export.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Custom data to include in the metadata file named .complete that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	CustomData []CustomDataInitParameters `json:"customData,omitempty" tf:"custom_data,omitempty"`

	// Unique identifier of the AWS bucket to export the Cloud Backup snapshot to. If necessary, use the Get All Snapshot Export Buckets API to retrieve the IDs of all available export buckets for a project or use the data source mongodbatlas_cloud_backup_snapshot_export_buckets
	ExportBucketID *string `json:"exportBucketId,omitempty" tf:"export_bucket_id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Unique identifier of the Cloud Backup snapshot to export. If necessary, use the Get All Cloud Backups API to retrieve the list of snapshot IDs for a cluster or use the data source mongodbatlas_cloud_cloud_backup_snapshots
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type BackupSnapshotExportJobObservation struct {

	// Name of the Atlas cluster whose snapshot you want to export.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Returned for sharded clusters only. Export job details for each replica set in the sharded cluster.
	Components []ComponentsObservation `json:"components,omitempty" tf:"components,omitempty"`

	// Timestamp in ISO 8601 date and time format in UTC when the export job was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Custom data to include in the metadata file named .complete that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	CustomData []CustomDataObservation `json:"customData,omitempty" tf:"custom_data,omitempty"`

	// Unique identifier of the AWS bucket to export the Cloud Backup snapshot to. If necessary, use the Get All Snapshot Export Buckets API to retrieve the IDs of all available export buckets for a project or use the data source mongodbatlas_cloud_backup_snapshot_export_buckets
	ExportBucketID *string `json:"exportBucketId,omitempty" tf:"export_bucket_id,omitempty"`

	// Unique identifier of the export job.
	ExportJobID *string `json:"exportJobId,omitempty" tf:"export_job_id,omitempty"`

	ExportStatusExportedCollections *float64 `json:"exportStatusExportedCollections,omitempty" tf:"export_status_exported_collections,omitempty"`

	ExportStatusTotalCollections *float64 `json:"exportStatusTotalCollections,omitempty" tf:"export_status_total_collections,omitempty"`

	// Timestamp in ISO 8601 date and time format in UTC when the export job completes.
	FinishedAt *string `json:"finishedAt,omitempty" tf:"finished_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Unique identifier of the Cloud Backup snapshot to export. If necessary, use the Get All Cloud Backups API to retrieve the list of snapshot IDs for a cluster or use the data source mongodbatlas_cloud_cloud_backup_snapshots
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Status of the export job. Value can be one of the following:
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type BackupSnapshotExportJobParameters struct {

	// Name of the Atlas cluster whose snapshot you want to export.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Custom data to include in the metadata file named .complete that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	// +kubebuilder:validation:Optional
	CustomData []CustomDataParameters `json:"customData,omitempty" tf:"custom_data,omitempty"`

	// Unique identifier of the AWS bucket to export the Cloud Backup snapshot to. If necessary, use the Get All Snapshot Export Buckets API to retrieve the IDs of all available export buckets for a project or use the data source mongodbatlas_cloud_backup_snapshot_export_buckets
	// +kubebuilder:validation:Optional
	ExportBucketID *string `json:"exportBucketId,omitempty" tf:"export_bucket_id,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Unique identifier of the Cloud Backup snapshot to export. If necessary, use the Get All Cloud Backups API to retrieve the list of snapshot IDs for a cluster or use the data source mongodbatlas_cloud_cloud_backup_snapshots
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type ComponentsInitParameters struct {
}

type ComponentsObservation struct {

	// Returned for sharded clusters only. Export job details for each replica set in the sharded cluster.
	ExportID *string `json:"exportId,omitempty" tf:"export_id,omitempty"`

	// Returned for sharded clusters only. Unique identifier of the export job for the replica set.
	ReplicaSetName *string `json:"replicaSetName,omitempty" tf:"replica_set_name,omitempty"`
}

type ComponentsParameters struct {
}

type CustomDataInitParameters struct {

	// Required if you want to include custom data using custom_data in the metadata file uploaded to the bucket. Key to include in the metadata file that Atlas uploads to the bucket when the export job finishes.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Required if you specify key.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomDataObservation struct {

	// Required if you want to include custom data using custom_data in the metadata file uploaded to the bucket. Key to include in the metadata file that Atlas uploads to the bucket when the export job finishes.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Required if you specify key.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CustomDataParameters struct {

	// Required if you want to include custom data using custom_data in the metadata file uploaded to the bucket. Key to include in the metadata file that Atlas uploads to the bucket when the export job finishes.
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// Required if you specify key.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// BackupSnapshotExportJobSpec defines the desired state of BackupSnapshotExportJob
type BackupSnapshotExportJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupSnapshotExportJobParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BackupSnapshotExportJobInitParameters `json:"initProvider,omitempty"`
}

// BackupSnapshotExportJobStatus defines the observed state of BackupSnapshotExportJob.
type BackupSnapshotExportJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupSnapshotExportJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BackupSnapshotExportJob is the Schema for the BackupSnapshotExportJobs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type BackupSnapshotExportJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterName) || (has(self.initProvider) && has(self.initProvider.clusterName))",message="spec.forProvider.clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.exportBucketId) || (has(self.initProvider) && has(self.initProvider.exportBucketId))",message="spec.forProvider.exportBucketId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.snapshotId) || (has(self.initProvider) && has(self.initProvider.snapshotId))",message="spec.forProvider.snapshotId is a required parameter"
	Spec   BackupSnapshotExportJobSpec   `json:"spec"`
	Status BackupSnapshotExportJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupSnapshotExportJobList contains a list of BackupSnapshotExportJobs
type BackupSnapshotExportJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupSnapshotExportJob `json:"items"`
}

// Repository type metadata.
var (
	BackupSnapshotExportJob_Kind             = "BackupSnapshotExportJob"
	BackupSnapshotExportJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupSnapshotExportJob_Kind}.String()
	BackupSnapshotExportJob_KindAPIVersion   = BackupSnapshotExportJob_Kind + "." + CRDGroupVersion.String()
	BackupSnapshotExportJob_GroupVersionKind = CRDGroupVersion.WithKind(BackupSnapshotExportJob_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupSnapshotExportJob{}, &BackupSnapshotExportJobList{})
}
