// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupSnapshotRestoreJobInitParameters struct {

	// The name of the Atlas cluster whose snapshot you want to restore.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Type of restore job to create. Possible configurations are: download, automated, or pointInTime only one must be set it in true.
	DeliveryTypeConfig []DeliveryTypeConfigInitParameters `json:"deliveryTypeConfig,omitempty" tf:"delivery_type_config,omitempty"`

	// The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Optional setting for pointInTime configuration. Unique identifier of the snapshot to restore.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type BackupSnapshotRestoreJobObservation struct {

	// Indicates whether the restore job was canceled.
	Cancelled *bool `json:"cancelled,omitempty" tf:"cancelled,omitempty"`

	// The name of the Atlas cluster whose snapshot you want to restore.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Type of restore job to create. Possible configurations are: download, automated, or pointInTime only one must be set it in true.
	DeliveryTypeConfig []DeliveryTypeConfigObservation `json:"deliveryTypeConfig,omitempty" tf:"delivery_type_config,omitempty"`

	// One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
	DeliveryURL []*string `json:"deliveryUrl,omitempty" tf:"delivery_url,omitempty"`

	// Indicates whether the restore job expired.
	Expired *bool `json:"expired,omitempty" tf:"expired,omitempty"`

	// UTC ISO 8601 formatted point in time when the restore job expires.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	// Indicates whether the restore job failed.
	Failed *bool `json:"failed,omitempty" tf:"failed,omitempty"`

	// UTC ISO 8601 formatted point in time when the restore job completed.
	FinishedAt *string `json:"finishedAt,omitempty" tf:"finished_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Optional setting for pointInTime configuration. Unique identifier of the snapshot to restore.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// The unique identifier of the restore job.
	SnapshotRestoreJobID *string `json:"snapshotRestoreJobId,omitempty" tf:"snapshot_restore_job_id,omitempty"`

	// Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`
}

type BackupSnapshotRestoreJobParameters struct {

	// The name of the Atlas cluster whose snapshot you want to restore.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Type of restore job to create. Possible configurations are: download, automated, or pointInTime only one must be set it in true.
	// +kubebuilder:validation:Optional
	DeliveryTypeConfig []DeliveryTypeConfigParameters `json:"deliveryTypeConfig,omitempty" tf:"delivery_type_config,omitempty"`

	// The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Optional setting for pointInTime configuration. Unique identifier of the snapshot to restore.
	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

type DeliveryTypeConfigInitParameters struct {

	// Set to true to use the automated configuration.
	Automated *bool `json:"automated,omitempty" tf:"automated,omitempty"`

	// Set to true to use the download configuration.
	Download *bool `json:"download,omitempty" tf:"download,omitempty"`

	// Optional setting for pointInTime configuration. Oplog operation number from which to you want to restore this snapshot. This is the second part of an Oplog timestamp. Used in conjunction with oplog_ts.
	OplogInc *float64 `json:"oplogInc,omitempty" tf:"oplog_inc,omitempty"`

	// Optional setting for pointInTime configuration. Timestamp in the number of seconds that have elapsed since the UNIX epoch from which to you want to restore this snapshot. This is the first part of an Oplog timestamp.
	OplogTS *float64 `json:"oplogTs,omitempty" tf:"oplog_ts,omitempty"`

	PointInTime *bool `json:"pointInTime,omitempty" tf:"point_in_time,omitempty"`

	// Optional setting for pointInTime configuration. Timestamp in the number of seconds that have elapsed since the UNIX epoch from which you want to restore this snapshot. Used instead of oplog settings.
	PointInTimeUtcSeconds *float64 `json:"pointInTimeUtcSeconds,omitempty" tf:"point_in_time_utc_seconds,omitempty"`

	// Name of the target Atlas cluster to which the restore job restores the snapshot. Required for automated and pointInTime.
	TargetClusterName *string `json:"targetClusterName,omitempty" tf:"target_cluster_name,omitempty"`

	// Name of the target Atlas cluster to which the restore job restores the snapshot. Required for automated and pointInTime.
	TargetProjectID *string `json:"targetProjectId,omitempty" tf:"target_project_id,omitempty"`
}

type DeliveryTypeConfigObservation struct {

	// Set to true to use the automated configuration.
	Automated *bool `json:"automated,omitempty" tf:"automated,omitempty"`

	// Set to true to use the download configuration.
	Download *bool `json:"download,omitempty" tf:"download,omitempty"`

	// Optional setting for pointInTime configuration. Oplog operation number from which to you want to restore this snapshot. This is the second part of an Oplog timestamp. Used in conjunction with oplog_ts.
	OplogInc *float64 `json:"oplogInc,omitempty" tf:"oplog_inc,omitempty"`

	// Optional setting for pointInTime configuration. Timestamp in the number of seconds that have elapsed since the UNIX epoch from which to you want to restore this snapshot. This is the first part of an Oplog timestamp.
	OplogTS *float64 `json:"oplogTs,omitempty" tf:"oplog_ts,omitempty"`

	PointInTime *bool `json:"pointInTime,omitempty" tf:"point_in_time,omitempty"`

	// Optional setting for pointInTime configuration. Timestamp in the number of seconds that have elapsed since the UNIX epoch from which you want to restore this snapshot. Used instead of oplog settings.
	PointInTimeUtcSeconds *float64 `json:"pointInTimeUtcSeconds,omitempty" tf:"point_in_time_utc_seconds,omitempty"`

	// Name of the target Atlas cluster to which the restore job restores the snapshot. Required for automated and pointInTime.
	TargetClusterName *string `json:"targetClusterName,omitempty" tf:"target_cluster_name,omitempty"`

	// Name of the target Atlas cluster to which the restore job restores the snapshot. Required for automated and pointInTime.
	TargetProjectID *string `json:"targetProjectId,omitempty" tf:"target_project_id,omitempty"`
}

type DeliveryTypeConfigParameters struct {

	// Set to true to use the automated configuration.
	// +kubebuilder:validation:Optional
	Automated *bool `json:"automated,omitempty" tf:"automated,omitempty"`

	// Set to true to use the download configuration.
	// +kubebuilder:validation:Optional
	Download *bool `json:"download,omitempty" tf:"download,omitempty"`

	// Optional setting for pointInTime configuration. Oplog operation number from which to you want to restore this snapshot. This is the second part of an Oplog timestamp. Used in conjunction with oplog_ts.
	// +kubebuilder:validation:Optional
	OplogInc *float64 `json:"oplogInc,omitempty" tf:"oplog_inc,omitempty"`

	// Optional setting for pointInTime configuration. Timestamp in the number of seconds that have elapsed since the UNIX epoch from which to you want to restore this snapshot. This is the first part of an Oplog timestamp.
	// +kubebuilder:validation:Optional
	OplogTS *float64 `json:"oplogTs,omitempty" tf:"oplog_ts,omitempty"`

	// +kubebuilder:validation:Optional
	PointInTime *bool `json:"pointInTime,omitempty" tf:"point_in_time,omitempty"`

	// Optional setting for pointInTime configuration. Timestamp in the number of seconds that have elapsed since the UNIX epoch from which you want to restore this snapshot. Used instead of oplog settings.
	// +kubebuilder:validation:Optional
	PointInTimeUtcSeconds *float64 `json:"pointInTimeUtcSeconds,omitempty" tf:"point_in_time_utc_seconds,omitempty"`

	// Name of the target Atlas cluster to which the restore job restores the snapshot. Required for automated and pointInTime.
	// +kubebuilder:validation:Optional
	TargetClusterName *string `json:"targetClusterName,omitempty" tf:"target_cluster_name,omitempty"`

	// Name of the target Atlas cluster to which the restore job restores the snapshot. Required for automated and pointInTime.
	// +kubebuilder:validation:Optional
	TargetProjectID *string `json:"targetProjectId,omitempty" tf:"target_project_id,omitempty"`
}

// BackupSnapshotRestoreJobSpec defines the desired state of BackupSnapshotRestoreJob
type BackupSnapshotRestoreJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupSnapshotRestoreJobParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BackupSnapshotRestoreJobInitParameters `json:"initProvider,omitempty"`
}

// BackupSnapshotRestoreJobStatus defines the observed state of BackupSnapshotRestoreJob.
type BackupSnapshotRestoreJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupSnapshotRestoreJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// BackupSnapshotRestoreJob is the Schema for the BackupSnapshotRestoreJobs API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type BackupSnapshotRestoreJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterName) || (has(self.initProvider) && has(self.initProvider.clusterName))",message="spec.forProvider.clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   BackupSnapshotRestoreJobSpec   `json:"spec"`
	Status BackupSnapshotRestoreJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupSnapshotRestoreJobList contains a list of BackupSnapshotRestoreJobs
type BackupSnapshotRestoreJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupSnapshotRestoreJob `json:"items"`
}

// Repository type metadata.
var (
	BackupSnapshotRestoreJob_Kind             = "BackupSnapshotRestoreJob"
	BackupSnapshotRestoreJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupSnapshotRestoreJob_Kind}.String()
	BackupSnapshotRestoreJob_KindAPIVersion   = BackupSnapshotRestoreJob_Kind + "." + CRDGroupVersion.String()
	BackupSnapshotRestoreJob_GroupVersionKind = CRDGroupVersion.WithKind(BackupSnapshotRestoreJob_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupSnapshotRestoreJob{}, &BackupSnapshotRestoreJobList{})
}
