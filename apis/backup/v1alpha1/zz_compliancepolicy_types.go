// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CompliancePolicyInitParameters struct {

	// Email address of a security or legal representative for the Backup Compliance Policy who is authorized to update the Backup Compliance Policy settings.
	AuthorizedEmail *string `json:"authorizedEmail,omitempty" tf:"authorized_email,omitempty"`

	// First name of the user who authorized to update the Backup Compliance Policy settings.
	AuthorizedUserFirstName *string `json:"authorizedUserFirstName,omitempty" tf:"authorized_user_first_name,omitempty"`

	// Last name of the user who authorized to update the Backup Compliance Policy settings.
	AuthorizedUserLastName *string `json:"authorizedUserLastName,omitempty" tf:"authorized_user_last_name,omitempty"`

	// Flag that indicates whether to enable additional backup copies for the cluster. If unspecified, this value defaults to false.
	CopyProtectionEnabled *bool `json:"copyProtectionEnabled,omitempty" tf:"copy_protection_enabled,omitempty"`

	// Flag that indicates whether Encryption at Rest using Customer Key Management is required for all clusters with a Backup Compliance Policy. If unspecified, this value defaults to false.
	EncryptionAtRestEnabled *bool `json:"encryptionAtRestEnabled,omitempty" tf:"encryption_at_rest_enabled,omitempty"`

	OnDemandPolicyItem []OnDemandPolicyItemInitParameters `json:"onDemandPolicyItem,omitempty" tf:"on_demand_policy_item,omitempty"`

	// Flag that indicates whether the cluster uses Continuous Cloud Backups with a Backup Compliance Policy. If unspecified, this value defaults to false.
	PitEnabled *bool `json:"pitEnabled,omitempty" tf:"pit_enabled,omitempty"`

	PolicyItemDaily []PolicyItemDailyInitParameters `json:"policyItemDaily,omitempty" tf:"policy_item_daily,omitempty"`

	PolicyItemHourly []PolicyItemHourlyInitParameters `json:"policyItemHourly,omitempty" tf:"policy_item_hourly,omitempty"`

	PolicyItemMonthly []PolicyItemMonthlyInitParameters `json:"policyItemMonthly,omitempty" tf:"policy_item_monthly,omitempty"`

	PolicyItemWeekly []PolicyItemWeeklyInitParameters `json:"policyItemWeekly,omitempty" tf:"policy_item_weekly,omitempty"`

	PolicyItemYearly []PolicyItemYearlyInitParameters `json:"policyItemYearly,omitempty" tf:"policy_item_yearly,omitempty"`

	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Number of previous days that you can restore back to with Continuous Cloud Backup with a Backup Compliance Policy. You must specify a positive, non-zero integer, and the maximum retention window can't exceed the hourly retention time. This parameter applies only to Continuous Cloud Backups with a Backup Compliance Policy.
	RestoreWindowDays *float64 `json:"restoreWindowDays,omitempty" tf:"restore_window_days,omitempty"`
}

type CompliancePolicyObservation struct {

	// Email address of a security or legal representative for the Backup Compliance Policy who is authorized to update the Backup Compliance Policy settings.
	AuthorizedEmail *string `json:"authorizedEmail,omitempty" tf:"authorized_email,omitempty"`

	// First name of the user who authorized to update the Backup Compliance Policy settings.
	AuthorizedUserFirstName *string `json:"authorizedUserFirstName,omitempty" tf:"authorized_user_first_name,omitempty"`

	// Last name of the user who authorized to update the Backup Compliance Policy settings.
	AuthorizedUserLastName *string `json:"authorizedUserLastName,omitempty" tf:"authorized_user_last_name,omitempty"`

	// Flag that indicates whether to enable additional backup copies for the cluster. If unspecified, this value defaults to false.
	CopyProtectionEnabled *bool `json:"copyProtectionEnabled,omitempty" tf:"copy_protection_enabled,omitempty"`

	// Flag that indicates whether Encryption at Rest using Customer Key Management is required for all clusters with a Backup Compliance Policy. If unspecified, this value defaults to false.
	EncryptionAtRestEnabled *bool `json:"encryptionAtRestEnabled,omitempty" tf:"encryption_at_rest_enabled,omitempty"`

	// Unique identifier of the backup policy item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OnDemandPolicyItem []OnDemandPolicyItemObservation `json:"onDemandPolicyItem,omitempty" tf:"on_demand_policy_item,omitempty"`

	// Flag that indicates whether the cluster uses Continuous Cloud Backups with a Backup Compliance Policy. If unspecified, this value defaults to false.
	PitEnabled *bool `json:"pitEnabled,omitempty" tf:"pit_enabled,omitempty"`

	PolicyItemDaily []PolicyItemDailyObservation `json:"policyItemDaily,omitempty" tf:"policy_item_daily,omitempty"`

	PolicyItemHourly []PolicyItemHourlyObservation `json:"policyItemHourly,omitempty" tf:"policy_item_hourly,omitempty"`

	PolicyItemMonthly []PolicyItemMonthlyObservation `json:"policyItemMonthly,omitempty" tf:"policy_item_monthly,omitempty"`

	PolicyItemWeekly []PolicyItemWeeklyObservation `json:"policyItemWeekly,omitempty" tf:"policy_item_weekly,omitempty"`

	PolicyItemYearly []PolicyItemYearlyObservation `json:"policyItemYearly,omitempty" tf:"policy_item_yearly,omitempty"`

	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Number of previous days that you can restore back to with Continuous Cloud Backup with a Backup Compliance Policy. You must specify a positive, non-zero integer, and the maximum retention window can't exceed the hourly retention time. This parameter applies only to Continuous Cloud Backups with a Backup Compliance Policy.
	RestoreWindowDays *float64 `json:"restoreWindowDays,omitempty" tf:"restore_window_days,omitempty"`

	// Label that indicates the state of the Backup Compliance Policy settings. MongoDB Cloud ignores this setting when you enable or update the Backup Compliance Policy settings.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// ISO 8601 timestamp format in UTC that indicates when the user updated the Data Protection Policy settings. MongoDB Cloud ignores this setting when you enable or update the Backup Compliance Policy settings.
	UpdatedDate *string `json:"updatedDate,omitempty" tf:"updated_date,omitempty"`

	// Email address that identifies the user who updated the Backup Compliance Policy settings. MongoDB Cloud ignores this email setting when you enable or update the Backup Compliance Policy settings.
	UpdatedUser *string `json:"updatedUser,omitempty" tf:"updated_user,omitempty"`
}

type CompliancePolicyParameters struct {

	// Email address of a security or legal representative for the Backup Compliance Policy who is authorized to update the Backup Compliance Policy settings.
	// +kubebuilder:validation:Optional
	AuthorizedEmail *string `json:"authorizedEmail,omitempty" tf:"authorized_email,omitempty"`

	// First name of the user who authorized to update the Backup Compliance Policy settings.
	// +kubebuilder:validation:Optional
	AuthorizedUserFirstName *string `json:"authorizedUserFirstName,omitempty" tf:"authorized_user_first_name,omitempty"`

	// Last name of the user who authorized to update the Backup Compliance Policy settings.
	// +kubebuilder:validation:Optional
	AuthorizedUserLastName *string `json:"authorizedUserLastName,omitempty" tf:"authorized_user_last_name,omitempty"`

	// Flag that indicates whether to enable additional backup copies for the cluster. If unspecified, this value defaults to false.
	// +kubebuilder:validation:Optional
	CopyProtectionEnabled *bool `json:"copyProtectionEnabled,omitempty" tf:"copy_protection_enabled,omitempty"`

	// Flag that indicates whether Encryption at Rest using Customer Key Management is required for all clusters with a Backup Compliance Policy. If unspecified, this value defaults to false.
	// +kubebuilder:validation:Optional
	EncryptionAtRestEnabled *bool `json:"encryptionAtRestEnabled,omitempty" tf:"encryption_at_rest_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	OnDemandPolicyItem []OnDemandPolicyItemParameters `json:"onDemandPolicyItem,omitempty" tf:"on_demand_policy_item,omitempty"`

	// Flag that indicates whether the cluster uses Continuous Cloud Backups with a Backup Compliance Policy. If unspecified, this value defaults to false.
	// +kubebuilder:validation:Optional
	PitEnabled *bool `json:"pitEnabled,omitempty" tf:"pit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemDaily []PolicyItemDailyParameters `json:"policyItemDaily,omitempty" tf:"policy_item_daily,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemHourly []PolicyItemHourlyParameters `json:"policyItemHourly,omitempty" tf:"policy_item_hourly,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemMonthly []PolicyItemMonthlyParameters `json:"policyItemMonthly,omitempty" tf:"policy_item_monthly,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemWeekly []PolicyItemWeeklyParameters `json:"policyItemWeekly,omitempty" tf:"policy_item_weekly,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyItemYearly []PolicyItemYearlyParameters `json:"policyItemYearly,omitempty" tf:"policy_item_yearly,omitempty"`

	// Unique 24-hexadecimal digit string that identifies your project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Number of previous days that you can restore back to with Continuous Cloud Backup with a Backup Compliance Policy. You must specify a positive, non-zero integer, and the maximum retention window can't exceed the hourly retention time. This parameter applies only to Continuous Cloud Backups with a Backup Compliance Policy.
	// +kubebuilder:validation:Optional
	RestoreWindowDays *float64 `json:"restoreWindowDays,omitempty" tf:"restore_window_days,omitempty"`
}

type OnDemandPolicyItemInitParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type OnDemandPolicyItemObservation struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Frequency associated with the backup policy item. For hourly policies, the frequency type is defined as ondemand. Note that this is a read-only value and not required in plan files - its value is implied from the policy resource type.
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	// Unique identifier of the backup policy item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type OnDemandPolicyItemParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	// +kubebuilder:validation:Optional
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	// +kubebuilder:validation:Optional
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	// +kubebuilder:validation:Optional
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemDailyInitParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemDailyObservation struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Frequency associated with the backup policy item. For hourly policies, the frequency type is defined as ondemand. Note that this is a read-only value and not required in plan files - its value is implied from the policy resource type.
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	// Unique identifier of the backup policy item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemDailyParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	// +kubebuilder:validation:Optional
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	// +kubebuilder:validation:Optional
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	// +kubebuilder:validation:Optional
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemHourlyInitParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemHourlyObservation struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Frequency associated with the backup policy item. For hourly policies, the frequency type is defined as ondemand. Note that this is a read-only value and not required in plan files - its value is implied from the policy resource type.
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	// Unique identifier of the backup policy item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemHourlyParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	// +kubebuilder:validation:Optional
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	// +kubebuilder:validation:Optional
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	// +kubebuilder:validation:Optional
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemMonthlyInitParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemMonthlyObservation struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Frequency associated with the backup policy item. For hourly policies, the frequency type is defined as ondemand. Note that this is a read-only value and not required in plan files - its value is implied from the policy resource type.
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	// Unique identifier of the backup policy item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemMonthlyParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	// +kubebuilder:validation:Optional
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	// +kubebuilder:validation:Optional
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	// +kubebuilder:validation:Optional
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemWeeklyInitParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemWeeklyObservation struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Frequency associated with the backup policy item. For hourly policies, the frequency type is defined as ondemand. Note that this is a read-only value and not required in plan files - its value is implied from the policy resource type.
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	// Unique identifier of the backup policy item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemWeeklyParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	// +kubebuilder:validation:Optional
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	// +kubebuilder:validation:Optional
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	// +kubebuilder:validation:Optional
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

type PolicyItemYearlyInitParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemYearlyObservation struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	FrequencyInterval *float64 `json:"frequencyInterval,omitempty" tf:"frequency_interval,omitempty"`

	// Frequency associated with the backup policy item. For hourly policies, the frequency type is defined as ondemand. Note that this is a read-only value and not required in plan files - its value is implied from the policy resource type.
	FrequencyType *string `json:"frequencyType,omitempty" tf:"frequency_type,omitempty"`

	// Unique identifier of the backup policy item.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	RetentionUnit *string `json:"retentionUnit,omitempty" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	RetentionValue *float64 `json:"retentionValue,omitempty" tf:"retention_value,omitempty"`
}

type PolicyItemYearlyParameters struct {

	// Desired frequency of the new backup policy item specified by frequency_type (hourly in this case). The supported values for hourly policies are 1, 2, 4, 6, 8 or 12 hours. Note that 12 hours is the only accepted value for NVMe clusters.
	// +kubebuilder:validation:Optional
	FrequencyInterval *float64 `json:"frequencyInterval" tf:"frequency_interval,omitempty"`

	// Scope of the backup policy item: days, weeks, months, or years.
	// +kubebuilder:validation:Optional
	RetentionUnit *string `json:"retentionUnit" tf:"retention_unit,omitempty"`

	// Value to associate with retention_unit.
	// +kubebuilder:validation:Optional
	RetentionValue *float64 `json:"retentionValue" tf:"retention_value,omitempty"`
}

// CompliancePolicySpec defines the desired state of CompliancePolicy
type CompliancePolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CompliancePolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CompliancePolicyInitParameters `json:"initProvider,omitempty"`
}

// CompliancePolicyStatus defines the observed state of CompliancePolicy.
type CompliancePolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CompliancePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CompliancePolicy is the Schema for the CompliancePolicys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type CompliancePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorizedEmail) || (has(self.initProvider) && has(self.initProvider.authorizedEmail))",message="spec.forProvider.authorizedEmail is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorizedUserFirstName) || (has(self.initProvider) && has(self.initProvider.authorizedUserFirstName))",message="spec.forProvider.authorizedUserFirstName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authorizedUserLastName) || (has(self.initProvider) && has(self.initProvider.authorizedUserLastName))",message="spec.forProvider.authorizedUserLastName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.onDemandPolicyItem) || (has(self.initProvider) && has(self.initProvider.onDemandPolicyItem))",message="spec.forProvider.onDemandPolicyItem is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   CompliancePolicySpec   `json:"spec"`
	Status CompliancePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CompliancePolicyList contains a list of CompliancePolicys
type CompliancePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CompliancePolicy `json:"items"`
}

// Repository type metadata.
var (
	CompliancePolicy_Kind             = "CompliancePolicy"
	CompliancePolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CompliancePolicy_Kind}.String()
	CompliancePolicy_KindAPIVersion   = CompliancePolicy_Kind + "." + CRDGroupVersion.String()
	CompliancePolicy_GroupVersionKind = CRDGroupVersion.WithKind(CompliancePolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&CompliancePolicy{}, &CompliancePolicyList{})
}
