// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContainerInitParameters struct {

	// CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following private networks:
	AtlasCidrBlock *string `json:"atlasCidrBlock,omitempty" tf:"atlas_cidr_block,omitempty"`

	// Unique identifier for the Atlas project for this Network Peering Container.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// Atlas region where the container resides, see the reference list for Atlas Azure region names Azure.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names AWS.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Atlas regions where the container resides. Provide this field only if you provide an atlas_cidr_block smaller than /18. GCP Regions values.
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`
}

type ContainerObservation struct {

	// CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following private networks:
	AtlasCidrBlock *string `json:"atlasCidrBlock,omitempty" tf:"atlas_cidr_block,omitempty"`

	// Unique identifier of the Azure subscription in which the VNet resides.
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty" tf:"azure_subscription_id,omitempty"`

	// The Network Peering Container ID.
	ContainerID *string `json:"containerId,omitempty" tf:"container_id,omitempty"`

	// Unique identifier of the GCP project in which the network peer resides. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique identifier of the Network Peering connection in the Atlas project. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
	NetworkName *string `json:"networkName,omitempty" tf:"network_name,omitempty"`

	// Unique identifier for the Atlas project for this Network Peering Container.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// Indicates whether the project has Network Peering connections deployed in the container.
	Provisioned *bool `json:"provisioned,omitempty" tf:"provisioned,omitempty"`

	// Atlas region where the container resides, see the reference list for Atlas Azure region names Azure.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names AWS.
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Atlas regions where the container resides. Provide this field only if you provide an atlas_cidr_block smaller than /18. GCP Regions values.
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`

	// Unique identifier of Atlas' AWS VPC.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	// The name of the Azure VNet. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
	VnetName *string `json:"vnetName,omitempty" tf:"vnet_name,omitempty"`
}

type ContainerParameters struct {

	// CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following private networks:
	// +kubebuilder:validation:Optional
	AtlasCidrBlock *string `json:"atlasCidrBlock,omitempty" tf:"atlas_cidr_block,omitempty"`

	// Unique identifier for the Atlas project for this Network Peering Container.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// Atlas region where the container resides, see the reference list for Atlas Azure region names Azure.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names AWS.
	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// Atlas regions where the container resides. Provide this field only if you provide an atlas_cidr_block smaller than /18. GCP Regions values.
	// +kubebuilder:validation:Optional
	Regions []*string `json:"regions,omitempty" tf:"regions,omitempty"`
}

// ContainerSpec defines the desired state of Container
type ContainerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContainerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContainerInitParameters `json:"initProvider,omitempty"`
}

// ContainerStatus defines the observed state of Container.
type ContainerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContainerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Container is the Schema for the Containers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type Container struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.atlasCidrBlock) || (has(self.initProvider) && has(self.initProvider.atlasCidrBlock))",message="spec.forProvider.atlasCidrBlock is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   ContainerSpec   `json:"spec"`
	Status ContainerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContainerList contains a list of Containers
type ContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Container `json:"items"`
}

// Repository type metadata.
var (
	Container_Kind             = "Container"
	Container_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Container_Kind}.String()
	Container_KindAPIVersion   = Container_Kind + "." + CRDGroupVersion.String()
	Container_GroupVersionKind = CRDGroupVersion.WithKind(Container_Kind)
)

func init() {
	SchemeBuilder.Register(&Container{}, &ContainerList{})
}
