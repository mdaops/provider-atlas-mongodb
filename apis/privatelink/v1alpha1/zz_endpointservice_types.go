// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointServiceInitParameters struct {

	// Unique identifier of the interface endpoint you created in your VPC with the AWS, AZURE or GCP resource.
	EndpointServiceID *string `json:"endpointServiceId,omitempty" tf:"endpoint_service_id,omitempty"`

	// Collection of individual private endpoints that comprise your endpoint group. Only for GCP. See below.
	Endpoints []EndpointsInitParameters `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// Unique identifier of the GCP project in which you created your endpoints. Only for GCP.
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// Private IP address of the private endpoint network interface you created in your Azure VNet. Only for AZURE.
	PrivateEndpointIPAddress *string `json:"privateEndpointIpAddress,omitempty" tf:"private_endpoint_ip_address,omitempty"`

	// Unique identifier of the AWS or AZURE PrivateLink connection which is created by mongodbatlas_privatelink_endpoint resource.
	PrivateLinkID *string `json:"privateLinkId,omitempty" tf:"private_link_id,omitempty"`

	// Unique identifier for the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for which you want to create a private endpoint. Atlas accepts AWS, AZURE or GCP.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

type EndpointServiceObservation struct {

	// Status of the interface endpoint for AWS.
	// Returns one of the following values:
	AwsConnectionStatus *string `json:"awsConnectionStatus,omitempty" tf:"aws_connection_status,omitempty"`

	// Status of the interface endpoint for AZURE.
	// Returns one of the following values:
	AzureStatus *string `json:"azureStatus,omitempty" tf:"azure_status,omitempty"`

	// Indicates if Atlas received a request to remove the interface endpoint from the private endpoint connection.
	DeleteRequested *bool `json:"deleteRequested,omitempty" tf:"delete_requested,omitempty"`

	// Unique identifier of the endpoint group. The endpoint group encompasses all of the endpoints that you created in GCP.
	EndpointGroupName *string `json:"endpointGroupName,omitempty" tf:"endpoint_group_name,omitempty"`

	// Unique identifier of the interface endpoint you created in your VPC with the AWS, AZURE or GCP resource.
	EndpointServiceID *string `json:"endpointServiceId,omitempty" tf:"endpoint_service_id,omitempty"`

	// Collection of individual private endpoints that comprise your endpoint group. Only for GCP. See below.
	Endpoints []EndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// Error message pertaining to the interface endpoint. Returns null if there are no errors.
	ErrorMessage *string `json:"errorMessage,omitempty" tf:"error_message,omitempty"`

	// Unique identifier of the GCP project in which you created your endpoints. Only for GCP.
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// Status of the interface endpoint for GCP.
	// Returns one of the following values:
	GCPStatus *string `json:"gcpStatus,omitempty" tf:"gcp_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique identifier of the interface endpoint.
	InterfaceEndpointID *string `json:"interfaceEndpointId,omitempty" tf:"interface_endpoint_id,omitempty"`

	// Name of the connection for this private endpoint that Atlas generates.
	PrivateEndpointConnectionName *string `json:"privateEndpointConnectionName,omitempty" tf:"private_endpoint_connection_name,omitempty"`

	// Private IP address of the private endpoint network interface you created in your Azure VNet. Only for AZURE.
	PrivateEndpointIPAddress *string `json:"privateEndpointIpAddress,omitempty" tf:"private_endpoint_ip_address,omitempty"`

	// Unique identifier of the private endpoint.
	PrivateEndpointResourceID *string `json:"privateEndpointResourceId,omitempty" tf:"private_endpoint_resource_id,omitempty"`

	// Unique identifier of the AWS or AZURE PrivateLink connection which is created by mongodbatlas_privatelink_endpoint resource.
	PrivateLinkID *string `json:"privateLinkId,omitempty" tf:"private_link_id,omitempty"`

	// Unique identifier for the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for which you want to create a private endpoint. Atlas accepts AWS, AZURE or GCP.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

type EndpointServiceParameters struct {

	// Unique identifier of the interface endpoint you created in your VPC with the AWS, AZURE or GCP resource.
	// +kubebuilder:validation:Optional
	EndpointServiceID *string `json:"endpointServiceId,omitempty" tf:"endpoint_service_id,omitempty"`

	// Collection of individual private endpoints that comprise your endpoint group. Only for GCP. See below.
	// +kubebuilder:validation:Optional
	Endpoints []EndpointsParameters `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// Unique identifier of the GCP project in which you created your endpoints. Only for GCP.
	// +kubebuilder:validation:Optional
	GCPProjectID *string `json:"gcpProjectId,omitempty" tf:"gcp_project_id,omitempty"`

	// Private IP address of the private endpoint network interface you created in your Azure VNet. Only for AZURE.
	// +kubebuilder:validation:Optional
	PrivateEndpointIPAddress *string `json:"privateEndpointIpAddress,omitempty" tf:"private_endpoint_ip_address,omitempty"`

	// Unique identifier of the AWS or AZURE PrivateLink connection which is created by mongodbatlas_privatelink_endpoint resource.
	// +kubebuilder:validation:Optional
	PrivateLinkID *string `json:"privateLinkId,omitempty" tf:"private_link_id,omitempty"`

	// Unique identifier for the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for which you want to create a private endpoint. Atlas accepts AWS, AZURE or GCP.
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

type EndpointsInitParameters struct {

	// Forwarding rule that corresponds to the endpoint you created in GCP.
	EndpointName *string `json:"endpointName,omitempty" tf:"endpoint_name,omitempty"`

	// Private IP address of the endpoint you created in GCP.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type EndpointsObservation struct {

	// Forwarding rule that corresponds to the endpoint you created in GCP.
	EndpointName *string `json:"endpointName,omitempty" tf:"endpoint_name,omitempty"`

	// Private IP address of the endpoint you created in GCP.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Status of the endpoint. Atlas returns one of the values shown above.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type EndpointsParameters struct {

	// Forwarding rule that corresponds to the endpoint you created in GCP.
	// +kubebuilder:validation:Optional
	EndpointName *string `json:"endpointName,omitempty" tf:"endpoint_name,omitempty"`

	// Private IP address of the endpoint you created in GCP.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

// EndpointServiceSpec defines the desired state of EndpointService
type EndpointServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointServiceInitParameters `json:"initProvider,omitempty"`
}

// EndpointServiceStatus defines the observed state of EndpointService.
type EndpointServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EndpointService is the Schema for the EndpointServices API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type EndpointService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpointServiceId) || (has(self.initProvider) && has(self.initProvider.endpointServiceId))",message="spec.forProvider.endpointServiceId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.privateLinkId) || (has(self.initProvider) && has(self.initProvider.privateLinkId))",message="spec.forProvider.privateLinkId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	Spec   EndpointServiceSpec   `json:"spec"`
	Status EndpointServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointServiceList contains a list of EndpointServices
type EndpointServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointService `json:"items"`
}

// Repository type metadata.
var (
	EndpointService_Kind             = "EndpointService"
	EndpointService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointService_Kind}.String()
	EndpointService_KindAPIVersion   = EndpointService_Kind + "." + CRDGroupVersion.String()
	EndpointService_GroupVersionKind = CRDGroupVersion.WithKind(EndpointService_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointService{}, &EndpointServiceList{})
}
