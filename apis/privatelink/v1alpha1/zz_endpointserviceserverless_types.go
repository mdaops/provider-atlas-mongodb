// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointServiceServerlessInitParameters struct {

	// Unique string that identifies the private endpoint's network interface.
	CloudProviderEndpointID *string `json:"cloudProviderEndpointId,omitempty" tf:"cloud_provider_endpoint_id,omitempty"`

	// Human-readable string to associate with this private endpoint.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the private endpoint.
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	// Human-readable label that identifies the serverless instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.
	PrivateEndpointIPAddress *string `json:"privateEndpointIpAddress,omitempty" tf:"private_endpoint_ip_address,omitempty"`

	// Unique 24-digit hexadecimal string that identifies the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for which you want to create a private endpoint. Atlas accepts AWS, AZURE.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

type EndpointServiceServerlessObservation struct {

	// Unique string that identifies the private endpoint's network interface.
	CloudProviderEndpointID *string `json:"cloudProviderEndpointId,omitempty" tf:"cloud_provider_endpoint_id,omitempty"`

	// Human-readable string to associate with this private endpoint.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the private endpoint.
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Human-readable label that identifies the serverless instance.
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.
	PrivateEndpointIPAddress *string `json:"privateEndpointIpAddress,omitempty" tf:"private_endpoint_ip_address,omitempty"`

	// Root-relative path that identifies the Azure Private Link Service that MongoDB Cloud manages.
	PrivateLinkServiceResourceID *string `json:"privateLinkServiceResourceId,omitempty" tf:"private_link_service_resource_id,omitempty"`

	// Unique 24-digit hexadecimal string that identifies the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for which you want to create a private endpoint. Atlas accepts AWS, AZURE.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// Human-readable label that indicates the current operating status of the private endpoint. Values include: RESERVATION_REQUESTED, RESERVED, INITIATING, AVAILABLE, FAILED, DELETING.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type EndpointServiceServerlessParameters struct {

	// Unique string that identifies the private endpoint's network interface.
	// +kubebuilder:validation:Optional
	CloudProviderEndpointID *string `json:"cloudProviderEndpointId,omitempty" tf:"cloud_provider_endpoint_id,omitempty"`

	// Human-readable string to associate with this private endpoint.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the private endpoint.
	// +kubebuilder:validation:Optional
	EndpointID *string `json:"endpointId,omitempty" tf:"endpoint_id,omitempty"`

	// Human-readable label that identifies the serverless instance.
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.
	// +kubebuilder:validation:Optional
	PrivateEndpointIPAddress *string `json:"privateEndpointIpAddress,omitempty" tf:"private_endpoint_ip_address,omitempty"`

	// Unique 24-digit hexadecimal string that identifies the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Cloud provider for which you want to create a private endpoint. Atlas accepts AWS, AZURE.
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

// EndpointServiceServerlessSpec defines the desired state of EndpointServiceServerless
type EndpointServiceServerlessSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointServiceServerlessParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointServiceServerlessInitParameters `json:"initProvider,omitempty"`
}

// EndpointServiceServerlessStatus defines the observed state of EndpointServiceServerless.
type EndpointServiceServerlessStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointServiceServerlessObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EndpointServiceServerless is the Schema for the EndpointServiceServerlesss API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type EndpointServiceServerless struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.endpointId) || (has(self.initProvider) && has(self.initProvider.endpointId))",message="spec.forProvider.endpointId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.instanceName) || (has(self.initProvider) && has(self.initProvider.instanceName))",message="spec.forProvider.instanceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.providerName) || (has(self.initProvider) && has(self.initProvider.providerName))",message="spec.forProvider.providerName is a required parameter"
	Spec   EndpointServiceServerlessSpec   `json:"spec"`
	Status EndpointServiceServerlessStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointServiceServerlessList contains a list of EndpointServiceServerlesss
type EndpointServiceServerlessList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointServiceServerless `json:"items"`
}

// Repository type metadata.
var (
	EndpointServiceServerless_Kind             = "EndpointServiceServerless"
	EndpointServiceServerless_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointServiceServerless_Kind}.String()
	EndpointServiceServerless_KindAPIVersion   = EndpointServiceServerless_Kind + "." + CRDGroupVersion.String()
	EndpointServiceServerless_GroupVersionKind = CRDGroupVersion.WithKind(EndpointServiceServerless_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointServiceServerless{}, &EndpointServiceServerlessList{})
}
