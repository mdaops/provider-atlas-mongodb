// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ArchiveInitParameters struct {

	// Name of the cluster that contains the collection.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the collection.
	CollName *string `json:"collName,omitempty" tf:"coll_name,omitempty"`

	// Type of MongoDB collection that you want to return. This value can be "TIMESERIES" or "STANDARD". Default is "STANDARD".
	CollectionType *string `json:"collectionType,omitempty" tf:"collection_type,omitempty"`

	// Criteria to use for archiving data. See criteria.
	Criteria []CriteriaInitParameters `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Name of the database that contains the collection.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Rule for specifying when data should be deleted from the archive. See data expiration rule.
	DataExpirationRule []DataExpirationRuleInitParameters `json:"dataExpirationRule,omitempty" tf:"data_expiration_rule,omitempty"`

	// Settings to configure the region where you wish to store your archived data. See data process region. This field is immutable hence cannot be updated.
	DataProcessRegion []DataProcessRegionInitParameters `json:"dataProcessRegion,omitempty" tf:"data_process_region,omitempty"`

	// (Recommended) Fields to use to partition data. You can specify up to two frequently queried fields (or up to three fields when one of them is date_field) to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see Data Structure in S3. The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
	PartitionFields []PartitionFieldsInitParameters `json:"partitionFields,omitempty" tf:"partition_fields,omitempty"`

	// State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// The unique ID for the project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Regular frequency and duration when archiving process occurs. See schedule.
	Schedule []ScheduleInitParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// Flag that indicates whether the provider will wait for the state of the online archive to reach IDLE or ACTIVE when creating an online archive. Defaults to false.
	SyncCreation *bool `json:"syncCreation,omitempty" tf:"sync_creation,omitempty"`
}

type ArchiveObservation struct {

	// ID of the online archive.
	ArchiveID *string `json:"archiveId,omitempty" tf:"archive_id,omitempty"`

	// Name of the cluster that contains the collection.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the collection.
	CollName *string `json:"collName,omitempty" tf:"coll_name,omitempty"`

	// Type of MongoDB collection that you want to return. This value can be "TIMESERIES" or "STANDARD". Default is "STANDARD".
	CollectionType *string `json:"collectionType,omitempty" tf:"collection_type,omitempty"`

	// Criteria to use for archiving data. See criteria.
	Criteria []CriteriaObservation `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Name of the database that contains the collection.
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Rule for specifying when data should be deleted from the archive. See data expiration rule.
	DataExpirationRule []DataExpirationRuleObservation `json:"dataExpirationRule,omitempty" tf:"data_expiration_rule,omitempty"`

	// Settings to configure the region where you wish to store your archived data. See data process region. This field is immutable hence cannot be updated.
	DataProcessRegion []DataProcessRegionObservation `json:"dataProcessRegion,omitempty" tf:"data_process_region,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Recommended) Fields to use to partition data. You can specify up to two frequently queried fields (or up to three fields when one of them is date_field) to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see Data Structure in S3. The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
	PartitionFields []PartitionFieldsObservation `json:"partitionFields,omitempty" tf:"partition_fields,omitempty"`

	// State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// The unique ID for the project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Regular frequency and duration when archiving process occurs. See schedule.
	Schedule []ScheduleObservation `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Flag that indicates whether the provider will wait for the state of the online archive to reach IDLE or ACTIVE when creating an online archive. Defaults to false.
	SyncCreation *bool `json:"syncCreation,omitempty" tf:"sync_creation,omitempty"`
}

type ArchiveParameters struct {

	// Name of the cluster that contains the collection.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Name of the collection.
	// +kubebuilder:validation:Optional
	CollName *string `json:"collName,omitempty" tf:"coll_name,omitempty"`

	// Type of MongoDB collection that you want to return. This value can be "TIMESERIES" or "STANDARD". Default is "STANDARD".
	// +kubebuilder:validation:Optional
	CollectionType *string `json:"collectionType,omitempty" tf:"collection_type,omitempty"`

	// Criteria to use for archiving data. See criteria.
	// +kubebuilder:validation:Optional
	Criteria []CriteriaParameters `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Name of the database that contains the collection.
	// +kubebuilder:validation:Optional
	DBName *string `json:"dbName,omitempty" tf:"db_name,omitempty"`

	// Rule for specifying when data should be deleted from the archive. See data expiration rule.
	// +kubebuilder:validation:Optional
	DataExpirationRule []DataExpirationRuleParameters `json:"dataExpirationRule,omitempty" tf:"data_expiration_rule,omitempty"`

	// Settings to configure the region where you wish to store your archived data. See data process region. This field is immutable hence cannot be updated.
	// +kubebuilder:validation:Optional
	DataProcessRegion []DataProcessRegionParameters `json:"dataProcessRegion,omitempty" tf:"data_process_region,omitempty"`

	// (Recommended) Fields to use to partition data. You can specify up to two frequently queried fields (or up to three fields when one of them is date_field) to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see Data Structure in S3. The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
	// +kubebuilder:validation:Optional
	PartitionFields []PartitionFieldsParameters `json:"partitionFields,omitempty" tf:"partition_fields,omitempty"`

	// State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
	// +kubebuilder:validation:Optional
	Paused *bool `json:"paused,omitempty" tf:"paused,omitempty"`

	// The unique ID for the project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Regular frequency and duration when archiving process occurs. See schedule.
	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// Flag that indicates whether the provider will wait for the state of the online archive to reach IDLE or ACTIVE when creating an online archive. Defaults to false.
	// +kubebuilder:validation:Optional
	SyncCreation *bool `json:"syncCreation,omitempty" tf:"sync_creation,omitempty"`
}

type CriteriaInitParameters struct {

	// Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter.
	DateField *string `json:"dateField,omitempty" tf:"date_field,omitempty"`

	// Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. You must set type to DATE if collectionType is TIMESERIES. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format,omitempty"`

	// Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster.
	ExpireAfterDays *float64 `json:"expireAfterDays,omitempty" tf:"expire_after_days,omitempty"`

	// JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// Type of criteria (DATE, CUSTOM)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CriteriaObservation struct {

	// Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter.
	DateField *string `json:"dateField,omitempty" tf:"date_field,omitempty"`

	// Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. You must set type to DATE if collectionType is TIMESERIES. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format,omitempty"`

	// Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster.
	ExpireAfterDays *float64 `json:"expireAfterDays,omitempty" tf:"expire_after_days,omitempty"`

	// JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// Type of criteria (DATE, CUSTOM)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CriteriaParameters struct {

	// Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter.
	// +kubebuilder:validation:Optional
	DateField *string `json:"dateField,omitempty" tf:"date_field,omitempty"`

	// Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. You must set type to DATE if collectionType is TIMESERIES. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
	// +kubebuilder:validation:Optional
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format,omitempty"`

	// Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster.
	// +kubebuilder:validation:Optional
	ExpireAfterDays *float64 `json:"expireAfterDays,omitempty" tf:"expire_after_days,omitempty"`

	// JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// Type of criteria (DATE, CUSTOM)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DataExpirationRuleInitParameters struct {

	// Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster.
	ExpireAfterDays *float64 `json:"expireAfterDays,omitempty" tf:"expire_after_days,omitempty"`
}

type DataExpirationRuleObservation struct {

	// Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster.
	ExpireAfterDays *float64 `json:"expireAfterDays,omitempty" tf:"expire_after_days,omitempty"`
}

type DataExpirationRuleParameters struct {

	// Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster.
	// +kubebuilder:validation:Optional
	ExpireAfterDays *float64 `json:"expireAfterDays" tf:"expire_after_days,omitempty"`
}

type DataProcessRegionInitParameters struct {

	// Human-readable label that identifies the Cloud service provider where you wish to store your archived data. AZURE may be selected only if Azure is the Cloud service provider for the cluster and no AWS online archive has been created for the cluster.
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see MongoDB Atlas API documentation
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type DataProcessRegionObservation struct {

	// Human-readable label that identifies the Cloud service provider where you wish to store your archived data. AZURE may be selected only if Azure is the Cloud service provider for the cluster and no AWS online archive has been created for the cluster.
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see MongoDB Atlas API documentation
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type DataProcessRegionParameters struct {

	// Human-readable label that identifies the Cloud service provider where you wish to store your archived data. AZURE may be selected only if Azure is the Cloud service provider for the cluster and no AWS online archive has been created for the cluster.
	// +kubebuilder:validation:Optional
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see MongoDB Atlas API documentation
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type PartitionFieldsInitParameters struct {

	// Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the criteria.dateField parameter defaults as the first item in the partition sequence.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type PartitionFieldsObservation struct {

	// Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
	FieldName *string `json:"fieldName,omitempty" tf:"field_name,omitempty"`

	// Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: date, int, long, objectId, string, uuid.
	FieldType *string `json:"fieldType,omitempty" tf:"field_type,omitempty"`

	// Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the criteria.dateField parameter defaults as the first item in the partition sequence.
	Order *float64 `json:"order,omitempty" tf:"order,omitempty"`
}

type PartitionFieldsParameters struct {

	// Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
	// +kubebuilder:validation:Optional
	FieldName *string `json:"fieldName" tf:"field_name,omitempty"`

	// Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the criteria.dateField parameter defaults as the first item in the partition sequence.
	// +kubebuilder:validation:Optional
	Order *float64 `json:"order" tf:"order,omitempty"`
}

type ScheduleInitParameters struct {

	// Day of the month when the scheduled archive starts. This field should be provided only when schedule type is MONTHLY.
	DayOfMonth *float64 `json:"dayOfMonth,omitempty" tf:"day_of_month,omitempty"`

	// Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7). This field should be provided only when schedule type is WEEKLY.
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Hour of the day when the scheduled window to run one online archive ends.
	EndHour *float64 `json:"endHour,omitempty" tf:"end_hour,omitempty"`

	// Minute of the hour when the scheduled window to run one online archive ends.
	EndMinute *float64 `json:"endMinute,omitempty" tf:"end_minute,omitempty"`

	// Hour of the day when the when the scheduled window to run one online archive starts.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// Minute of the hour when the scheduled window to run one online archive starts.
	StartMinute *float64 `json:"startMinute,omitempty" tf:"start_minute,omitempty"`

	// Type of criteria (DATE, CUSTOM)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScheduleObservation struct {

	// Day of the month when the scheduled archive starts. This field should be provided only when schedule type is MONTHLY.
	DayOfMonth *float64 `json:"dayOfMonth,omitempty" tf:"day_of_month,omitempty"`

	// Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7). This field should be provided only when schedule type is WEEKLY.
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Hour of the day when the scheduled window to run one online archive ends.
	EndHour *float64 `json:"endHour,omitempty" tf:"end_hour,omitempty"`

	// Minute of the hour when the scheduled window to run one online archive ends.
	EndMinute *float64 `json:"endMinute,omitempty" tf:"end_minute,omitempty"`

	// Hour of the day when the when the scheduled window to run one online archive starts.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// Minute of the hour when the scheduled window to run one online archive starts.
	StartMinute *float64 `json:"startMinute,omitempty" tf:"start_minute,omitempty"`

	// Type of criteria (DATE, CUSTOM)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ScheduleParameters struct {

	// Day of the month when the scheduled archive starts. This field should be provided only when schedule type is MONTHLY.
	// +kubebuilder:validation:Optional
	DayOfMonth *float64 `json:"dayOfMonth,omitempty" tf:"day_of_month,omitempty"`

	// Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7). This field should be provided only when schedule type is WEEKLY.
	// +kubebuilder:validation:Optional
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Hour of the day when the scheduled window to run one online archive ends.
	// +kubebuilder:validation:Optional
	EndHour *float64 `json:"endHour,omitempty" tf:"end_hour,omitempty"`

	// Minute of the hour when the scheduled window to run one online archive ends.
	// +kubebuilder:validation:Optional
	EndMinute *float64 `json:"endMinute,omitempty" tf:"end_minute,omitempty"`

	// Hour of the day when the when the scheduled window to run one online archive starts.
	// +kubebuilder:validation:Optional
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// Minute of the hour when the scheduled window to run one online archive starts.
	// +kubebuilder:validation:Optional
	StartMinute *float64 `json:"startMinute,omitempty" tf:"start_minute,omitempty"`

	// Type of criteria (DATE, CUSTOM)
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// ArchiveSpec defines the desired state of Archive
type ArchiveSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ArchiveParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ArchiveInitParameters `json:"initProvider,omitempty"`
}

// ArchiveStatus defines the observed state of Archive.
type ArchiveStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ArchiveObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Archive is the Schema for the Archives API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type Archive struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.clusterName) || (has(self.initProvider) && has(self.initProvider.clusterName))",message="spec.forProvider.clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.collName) || (has(self.initProvider) && has(self.initProvider.collName))",message="spec.forProvider.collName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.criteria) || (has(self.initProvider) && has(self.initProvider.criteria))",message="spec.forProvider.criteria is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dbName) || (has(self.initProvider) && has(self.initProvider.dbName))",message="spec.forProvider.dbName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	Spec   ArchiveSpec   `json:"spec"`
	Status ArchiveStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ArchiveList contains a list of Archives
type ArchiveList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Archive `json:"items"`
}

// Repository type metadata.
var (
	Archive_Kind             = "Archive"
	Archive_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Archive_Kind}.String()
	Archive_KindAPIVersion   = Archive_Kind + "." + CRDGroupVersion.String()
	Archive_GroupVersionKind = CRDGroupVersion.WithKind(Archive_Kind)
)

func init() {
	SchemeBuilder.Register(&Archive{}, &ArchiveList{})
}
