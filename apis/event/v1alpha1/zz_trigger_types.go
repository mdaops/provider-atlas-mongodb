// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsEventbridgeInitParameters struct {

	// AWS Account ID.
	ConfigAccountID *string `json:"configAccountId,omitempty" tf:"config_account_id,omitempty"`

	// Region of AWS Account.
	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region,omitempty"`
}

type AwsEventbridgeObservation struct {

	// AWS Account ID.
	ConfigAccountID *string `json:"configAccountId,omitempty" tf:"config_account_id,omitempty"`

	// Region of AWS Account.
	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region,omitempty"`
}

type AwsEventbridgeParameters struct {

	// AWS Account ID.
	// +kubebuilder:validation:Optional
	ConfigAccountID *string `json:"configAccountId,omitempty" tf:"config_account_id,omitempty"`

	// Region of AWS Account.
	// +kubebuilder:validation:Optional
	ConfigRegion *string `json:"configRegion,omitempty" tf:"config_region,omitempty"`
}

type EventProcessorsInitParameters struct {
	AwsEventbridge []AwsEventbridgeInitParameters `json:"awsEventbridge,omitempty" tf:"aws_eventbridge,omitempty"`
}

type EventProcessorsObservation struct {
	AwsEventbridge []AwsEventbridgeObservation `json:"awsEventbridge,omitempty" tf:"aws_eventbridge,omitempty"`
}

type EventProcessorsParameters struct {

	// +kubebuilder:validation:Optional
	AwsEventbridge []AwsEventbridgeParameters `json:"awsEventbridge,omitempty" tf:"aws_eventbridge,omitempty"`
}

type TriggerInitParameters struct {

	// The ObjectID of your application.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// Optional for DATABASE type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection,omitempty"`

	// Required for DATABASE type. The name of the MongoDB database to watch.
	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database,omitempty"`

	// Optional for DATABASE type. If true, indicates that UPDATE change events should include the most current majority-committed version of the modified document in the fullDocument field.
	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document,omitempty"`

	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before,omitempty"`

	// Optional for DATABASE type. A $match expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match,omitempty"`

	// Required for AUTHENTICATION type. The authentication operation type to listen for. Possible Values: LOGIN, CREATE, DELETE
	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type,omitempty"`

	// Required for DATABASE type. The database event operation types to listen for. This must contain at least one value. Possible Values: INSERT, UPDATE, REPLACE, DELETE
	ConfigOperationTypes []*string `json:"configOperationTypes,omitempty" tf:"config_operation_types,omitempty"`

	// Optional for DATABASE type. A $project expression document that Realm uses to filter the fields that appear in change event objects.
	ConfigProject *string `json:"configProject,omitempty" tf:"config_project,omitempty"`

	// Required for AUTHENTICATION type. A list of one or more authentication provider id values. The trigger will only listen for authentication events produced by these providers.
	ConfigProviders []*string `json:"configProviders,omitempty" tf:"config_providers,omitempty"`

	// Required for SCHEDULED type. A cron expression that defines the trigger schedule.
	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule,omitempty"`

	// Required for DATABASE type. The ID of the MongoDB Service associated with the trigger.
	ConfigServiceID *string `json:"configServiceId,omitempty" tf:"config_service_id,omitempty"`

	// Default: false If true, the trigger is disabled.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: AWS_EVENTBRIDGE For an example configuration object, see Send Trigger Events to AWS EventBridge.
	EventProcessors []EventProcessorsInitParameters `json:"eventProcessors,omitempty" tf:"event_processors,omitempty"`

	// The ID of the function associated with the trigger.
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// The unique ID for the project to create the trigger.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The type of the trigger. Possible Values: DATABASE, AUTHENTICATION,SCHEDULED
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	Unordered *bool `json:"unordered,omitempty" tf:"unordered,omitempty"`
}

type TriggerObservation struct {

	// The ObjectID of your application.
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// Optional for DATABASE type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection,omitempty"`

	// Required for DATABASE type. The name of the MongoDB database to watch.
	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database,omitempty"`

	// Optional for DATABASE type. If true, indicates that UPDATE change events should include the most current majority-committed version of the modified document in the fullDocument field.
	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document,omitempty"`

	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before,omitempty"`

	// Optional for DATABASE type. A $match expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match,omitempty"`

	// Required for AUTHENTICATION type. The authentication operation type to listen for. Possible Values: LOGIN, CREATE, DELETE
	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type,omitempty"`

	// Required for DATABASE type. The database event operation types to listen for. This must contain at least one value. Possible Values: INSERT, UPDATE, REPLACE, DELETE
	ConfigOperationTypes []*string `json:"configOperationTypes,omitempty" tf:"config_operation_types,omitempty"`

	// Optional for DATABASE type. A $project expression document that Realm uses to filter the fields that appear in change event objects.
	ConfigProject *string `json:"configProject,omitempty" tf:"config_project,omitempty"`

	// Required for AUTHENTICATION type. A list of one or more authentication provider id values. The trigger will only listen for authentication events produced by these providers.
	ConfigProviders []*string `json:"configProviders,omitempty" tf:"config_providers,omitempty"`

	// Required for SCHEDULED type. A cron expression that defines the trigger schedule.
	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule,omitempty"`

	// The type of the trigger. Possible Values: DATABASE, AUTHENTICATION,SCHEDULED
	ConfigScheduleType *string `json:"configScheduleType,omitempty" tf:"config_schedule_type,omitempty"`

	// Required for DATABASE type. The ID of the MongoDB Service associated with the trigger.
	ConfigServiceID *string `json:"configServiceId,omitempty" tf:"config_service_id,omitempty"`

	// Default: false If true, the trigger is disabled.
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: AWS_EVENTBRIDGE For an example configuration object, see Send Trigger Events to AWS EventBridge.
	EventProcessors []EventProcessorsObservation `json:"eventProcessors,omitempty" tf:"event_processors,omitempty"`

	// The ID of the function associated with the trigger.
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// The name of the function associated with the trigger.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique ID for the project to create the trigger.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The unique ID of the trigger.
	TriggerID *string `json:"triggerId,omitempty" tf:"trigger_id,omitempty"`

	// The type of the trigger. Possible Values: DATABASE, AUTHENTICATION,SCHEDULED
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	Unordered *bool `json:"unordered,omitempty" tf:"unordered,omitempty"`
}

type TriggerParameters struct {

	// The ObjectID of your application.
	// +kubebuilder:validation:Optional
	AppID *string `json:"appId,omitempty" tf:"app_id,omitempty"`

	// Optional for DATABASE type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	// +kubebuilder:validation:Optional
	ConfigCollection *string `json:"configCollection,omitempty" tf:"config_collection,omitempty"`

	// Required for DATABASE type. The name of the MongoDB database to watch.
	// +kubebuilder:validation:Optional
	ConfigDatabase *string `json:"configDatabase,omitempty" tf:"config_database,omitempty"`

	// Optional for DATABASE type. If true, indicates that UPDATE change events should include the most current majority-committed version of the modified document in the fullDocument field.
	// +kubebuilder:validation:Optional
	ConfigFullDocument *bool `json:"configFullDocument,omitempty" tf:"config_full_document,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigFullDocumentBefore *bool `json:"configFullDocumentBefore,omitempty" tf:"config_full_document_before,omitempty"`

	// Optional for DATABASE type. A $match expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	// +kubebuilder:validation:Optional
	ConfigMatch *string `json:"configMatch,omitempty" tf:"config_match,omitempty"`

	// Required for AUTHENTICATION type. The authentication operation type to listen for. Possible Values: LOGIN, CREATE, DELETE
	// +kubebuilder:validation:Optional
	ConfigOperationType *string `json:"configOperationType,omitempty" tf:"config_operation_type,omitempty"`

	// Required for DATABASE type. The database event operation types to listen for. This must contain at least one value. Possible Values: INSERT, UPDATE, REPLACE, DELETE
	// +kubebuilder:validation:Optional
	ConfigOperationTypes []*string `json:"configOperationTypes,omitempty" tf:"config_operation_types,omitempty"`

	// Optional for DATABASE type. A $project expression document that Realm uses to filter the fields that appear in change event objects.
	// +kubebuilder:validation:Optional
	ConfigProject *string `json:"configProject,omitempty" tf:"config_project,omitempty"`

	// Required for AUTHENTICATION type. A list of one or more authentication provider id values. The trigger will only listen for authentication events produced by these providers.
	// +kubebuilder:validation:Optional
	ConfigProviders []*string `json:"configProviders,omitempty" tf:"config_providers,omitempty"`

	// Required for SCHEDULED type. A cron expression that defines the trigger schedule.
	// +kubebuilder:validation:Optional
	ConfigSchedule *string `json:"configSchedule,omitempty" tf:"config_schedule,omitempty"`

	// Required for DATABASE type. The ID of the MongoDB Service associated with the trigger.
	// +kubebuilder:validation:Optional
	ConfigServiceID *string `json:"configServiceId,omitempty" tf:"config_service_id,omitempty"`

	// Default: false If true, the trigger is disabled.
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: AWS_EVENTBRIDGE For an example configuration object, see Send Trigger Events to AWS EventBridge.
	// +kubebuilder:validation:Optional
	EventProcessors []EventProcessorsParameters `json:"eventProcessors,omitempty" tf:"event_processors,omitempty"`

	// The ID of the function associated with the trigger.
	// +kubebuilder:validation:Optional
	FunctionID *string `json:"functionId,omitempty" tf:"function_id,omitempty"`

	// The unique ID for the project to create the trigger.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The type of the trigger. Possible Values: DATABASE, AUTHENTICATION,SCHEDULED
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	// +kubebuilder:validation:Optional
	Unordered *bool `json:"unordered,omitempty" tf:"unordered,omitempty"`
}

// TriggerSpec defines the desired state of Trigger
type TriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TriggerInitParameters `json:"initProvider,omitempty"`
}

// TriggerStatus defines the observed state of Trigger.
type TriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Trigger is the Schema for the Triggers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,atlas-mongodb}
type Trigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appId) || (has(self.initProvider) && has(self.initProvider.appId))",message="spec.forProvider.appId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.projectId) || (has(self.initProvider) && has(self.initProvider.projectId))",message="spec.forProvider.projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   TriggerSpec   `json:"spec"`
	Status TriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerList contains a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trigger `json:"items"`
}

// Repository type metadata.
var (
	Trigger_Kind             = "Trigger"
	Trigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Trigger_Kind}.String()
	Trigger_KindAPIVersion   = Trigger_Kind + "." + CRDGroupVersion.String()
	Trigger_GroupVersionKind = CRDGroupVersion.WithKind(Trigger_Kind)
)

func init() {
	SchemeBuilder.Register(&Trigger{}, &TriggerList{})
}
